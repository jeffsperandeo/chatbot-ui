{
    "sourceFile": "backend/utils/redisClient.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1717879384309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717880374068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,21 +15,21 @@\n \n async function storeContext(userId, context) {\n     try {\n         await client.hSet(`user:${userId}:context`, context);\n-        console.log('Context stored successfully');\n+        console.log('Context stored successfully for user:', userId);\n     } catch (err) {\n-        console.error('Error storing context:', err);\n+        console.error('Error storing context for user:', userId, err);\n     }\n }\n \n async function getContext(userId) {\n     try {\n         const context = await client.hGetAll(`user:${userId}:context`);\n-        console.log('Context retrieved successfully:', context);\n+        console.log('Context retrieved successfully for user:', userId, context);\n         return context;\n     } catch (err) {\n-        console.error('Error retrieving context:', err);\n+        console.error('Error retrieving context for user:', userId, err);\n     }\n }\n \n module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1717886514189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// backend/utils/redisClient.js\n const redis = require('redis');\n require('dotenv').config();\n \n const client = redis.createClient({\n"
                },
                {
                    "date": 1717887513114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,24 +13,24 @@\n }).catch(err => {\n     console.error('Error connecting to Redis', err);\n });\n \n-async function storeContext(userId, context) {\n+async function storeContext(key, context) {\n     try {\n-        await client.hSet(`user:${userId}:context`, context);\n-        console.log('Context stored successfully for user:', userId);\n+        await client.set(key, JSON.stringify(context));\n+        console.log('Context stored successfully for key:', key);\n     } catch (err) {\n-        console.error('Error storing context for user:', userId, err);\n+        console.error('Error storing context for key:', key, err);\n     }\n }\n \n-async function getContext(userId) {\n+async function getContext(key) {\n     try {\n-        const context = await client.hGetAll(`user:${userId}:context`);\n-        console.log('Context retrieved successfully for user:', userId, context);\n-        return context;\n+        const context = await client.get(key);\n+        console.log('Context retrieved successfully for key:', key, context);\n+        return JSON.parse(context);\n     } catch (err) {\n-        console.error('Error retrieving context for user:', userId, err);\n+        console.error('Error retrieving context for key:', key, err);\n     }\n }\n \n module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1717887798640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,24 +13,24 @@\n }).catch(err => {\n     console.error('Error connecting to Redis', err);\n });\n \n-async function storeContext(key, context) {\n+async function storeContext(userId, context) {\n     try {\n-        await client.set(key, JSON.stringify(context));\n-        console.log('Context stored successfully for key:', key);\n+        await client.hSet(`user:${userId}:context`, context);\n+        console.log('Context stored successfully for user:', userId);\n     } catch (err) {\n-        console.error('Error storing context for key:', key, err);\n+        console.error('Error storing context for user:', userId, err);\n     }\n }\n \n-async function getContext(key) {\n+async function getContext(userId) {\n     try {\n-        const context = await client.get(key);\n-        console.log('Context retrieved successfully for key:', key, context);\n-        return JSON.parse(context);\n+        const context = await client.hGetAll(`user:${userId}:context`);\n+        console.log('Context retrieved successfully for user:', userId, context);\n+        return context;\n     } catch (err) {\n-        console.error('Error retrieving context for key:', key, err);\n+        console.error('Error retrieving context for user:', userId, err);\n     }\n }\n \n module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1717899732887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n });\n \n async function storeContext(userId, context) {\n     try {\n-        await client.hSet(`user:${userId}:context`, context);\n+        await client.hSet(`user:${userId}:context`, JSON.stringify(context)); // Convert context to a string\n         console.log('Context stored successfully for user:', userId);\n     } catch (err) {\n         console.error('Error storing context for user:', userId, err);\n     }\n"
                },
                {
                    "date": 1718031732383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,24 +13,24 @@\n }).catch(err => {\n     console.error('Error connecting to Redis', err);\n });\n \n-async function storeContext(userId, context) {\n+async function storeContext(key, value) {\n     try {\n-        await client.hSet(`user:${userId}:context`, JSON.stringify(context)); // Convert context to a string\n-        console.log('Context stored successfully for user:', userId);\n+        await client.set(key, value);\n+        console.log('Context stored successfully:', key);\n     } catch (err) {\n-        console.error('Error storing context for user:', userId, err);\n+        console.error('Error storing context:', key, err);\n     }\n }\n \n-async function getContext(userId) {\n+async function getContext(key) {\n     try {\n-        const context = await client.hGetAll(`user:${userId}:context`);\n-        console.log('Context retrieved successfully for user:', userId, context);\n-        return context;\n+        const value = await client.get(key);\n+        console.log('Context retrieved successfully:', key, value);\n+        return value;\n     } catch (err) {\n-        console.error('Error retrieving context for user:', userId, err);\n+        console.error('Error retrieving context:', key, err);\n     }\n }\n \n module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1718032156846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n async function storeContext(key, value) {\n     try {\n         await client.set(key, value);\n-        console.log('Context stored successfully:', key);\n+        console.log('Context stored successfully:', key, value);\n     } catch (err) {\n         console.error('Error storing context:', key, err);\n     }\n }\n"
                },
                {
                    "date": 1718042139423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// backend/utils/redisClient.js\n const redis = require('redis');\n require('dotenv').config();\n \n const client = redis.createClient({\n"
                },
                {
                    "date": 1718045370005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+const redis = require('redis');\n+require('dotenv').config();\n+\n+const client = redis.createClient({\n+    url: process.env.REDIS_URL\n+});\n+\n+client.on('error', (err) => console.log('Redis Client Error', err));\n+\n+client.connect().then(() => {\n+    console.log('Connected to Redis');\n+}).catch(err => {\n+    console.error('Error connecting to Redis', err);\n+});\n+\n+async function storeContext(key, value) {\n+    try {\n+        await client.set(key, value);\n+        console.log('Context stored successfully:', key, value);\n+    } catch (err) {\n+        console.error('Error storing context:', key, err);\n+    }\n+}\n+\n+async function getContext(key) {\n+    try {\n+        const value = await client.get(key);\n+        console.log('Context retrieved successfully:', key, value);\n+        return value;\n+    } catch (err) {\n+        console.error('Error retrieving context:', key, err);\n+    }\n+}\n+\n+module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1718133846574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,39 +32,4 @@\n     }\n }\n \n module.exports = { storeContext, getContext };\n-const redis = require('redis');\n-require('dotenv').config();\n-\n-const client = redis.createClient({\n-    url: process.env.REDIS_URL\n-});\n-\n-client.on('error', (err) => console.log('Redis Client Error', err));\n-\n-client.connect().then(() => {\n-    console.log('Connected to Redis');\n-}).catch(err => {\n-    console.error('Error connecting to Redis', err);\n-});\n-\n-async function storeContext(key, value) {\n-    try {\n-        await client.set(key, value);\n-        console.log('Context stored successfully:', key, value);\n-    } catch (err) {\n-        console.error('Error storing context:', key, err);\n-    }\n-}\n-\n-async function getContext(key) {\n-    try {\n-        const value = await client.get(key);\n-        console.log('Context retrieved successfully:', key, value);\n-        return value;\n-    } catch (err) {\n-        console.error('Error retrieving context:', key, err);\n-    }\n-}\n-\n-module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1718274711407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// redisClient.js\n const redis = require('redis');\n require('dotenv').config();\n \n const client = redis.createClient({\n@@ -14,9 +15,9 @@\n });\n \n async function storeContext(key, value) {\n     try {\n-        await client.set(key, value);\n+        await client.set(key, JSON.stringify(value));\n         console.log('Context stored successfully:', key, value);\n     } catch (err) {\n         console.error('Error storing context:', key, err);\n     }\n@@ -25,9 +26,9 @@\n async function getContext(key) {\n     try {\n         const value = await client.get(key);\n         console.log('Context retrieved successfully:', key, value);\n-        return value;\n+        return JSON.parse(value);\n     } catch (err) {\n         console.error('Error retrieving context:', key, err);\n     }\n }\n"
                },
                {
                    "date": 1718276959163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// redisClient.js\n const redis = require('redis');\n require('dotenv').config();\n \n const client = redis.createClient({\n@@ -15,9 +14,9 @@\n });\n \n async function storeContext(key, value) {\n     try {\n-        await client.set(key, JSON.stringify(value));\n+        await client.set(key, value);\n         console.log('Context stored successfully:', key, value);\n     } catch (err) {\n         console.error('Error storing context:', key, err);\n     }\n@@ -26,9 +25,9 @@\n async function getContext(key) {\n     try {\n         const value = await client.get(key);\n         console.log('Context retrieved successfully:', key, value);\n-        return JSON.parse(value);\n+        return value;\n     } catch (err) {\n         console.error('Error retrieving context:', key, err);\n     }\n }\n"
                },
                {
                    "date": 1718289120512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// backend/utils/redisClient.js\n const redis = require('redis');\n require('dotenv').config();\n \n const client = redis.createClient({\n"
                },
                {
                    "date": 1718289187176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,59 @@\n-// backend/utils/redisClient.js\n-const redis = require('redis');\n-require('dotenv').config();\n+// app/api/chat/openai/route.ts\n+import { checkApiKey, getServerProfile } from \"@/lib/server/server-chat-helpers\"\n+import { ChatSettings } from \"@/types\"\n+import { OpenAIStream, StreamingTextResponse } from \"ai\"\n+import { ServerRuntime } from \"next\"\n+import OpenAI from \"openai\"\n \n-const client = redis.createClient({\n-    url: process.env.REDIS_URL\n-});\n+export const runtime: ServerRuntime = \"edge\"\n \n-client.on('error', (err) => console.log('Redis Client Error', err));\n+export async function POST(request: Request) {\n+  const json = await request.json()\n+  const { chatSettings, messages } = json as {\n+    chatSettings: ChatSettings\n+    messages: any[]\n+  }\n \n-client.connect().then(() => {\n-    console.log('Connected to Redis');\n-}).catch(err => {\n-    console.error('Error connecting to Redis', err);\n-});\n+  try {\n+    const profile = await getServerProfile()\n \n-async function storeContext(key, value) {\n-    try {\n-        await client.set(key, value);\n-        console.log('Context stored successfully:', key, value);\n-    } catch (err) {\n-        console.error('Error storing context:', key, err);\n+    checkApiKey(profile.openai_api_key, \"OpenAI\")\n+\n+    const openai = new OpenAI({\n+      apiKey: profile.openai_api_key || \"\",\n+      organization: profile.openai_organization_id\n+    })\n+\n+    const response = await openai.chat.completions.create({\n+      model: chatSettings.model,\n+      messages: messages,\n+      temperature: chatSettings.temperature,\n+      max_tokens:\n+        chatSettings.model === \"gpt-4-vision-preview\" ||\n+        chatSettings.model === \"gpt-4o\"\n+          ? 4096\n+          : undefined,\n+      stream: true\n+    })\n+\n+    // Convert the response into a stream\n+    const stream = OpenAIStream(response)\n+\n+    return new StreamingTextResponse(stream)\n+  } catch (error: any) {\n+    let errorMessage = error.message || \"An unexpected error occurred\"\n+    const errorCode = error.status || 500\n+\n+    if (errorMessage.toLowerCase().includes(\"api key not found\")) {\n+      errorMessage =\n+        \"OpenAI API Key not found. Please set it in your profile settings.\"\n+    } else if (errorMessage.toLowerCase().includes(\"incorrect api key\")) {\n+      errorMessage =\n+        \"OpenAI API Key is incorrect. Please fix it in your profile settings.\"\n     }\n-}\n \n-async function getContext(key) {\n-    try {\n-        const value = await client.get(key);\n-        console.log('Context retrieved successfully:', key, value);\n-        return value;\n-    } catch (err) {\n-        console.error('Error retrieving context:', key, err);\n-    }\n+    return new Response(JSON.stringify({ message: errorMessage }), {\n+      status: errorCode\n+    })\n+  }\n }\n-\n-module.exports = { storeContext, getContext };\n"
                },
                {
                    "date": 1718289252291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,59 +1,36 @@\n-// app/api/chat/openai/route.ts\n-import { checkApiKey, getServerProfile } from \"@/lib/server/server-chat-helpers\"\n-import { ChatSettings } from \"@/types\"\n-import { OpenAIStream, StreamingTextResponse } from \"ai\"\n-import { ServerRuntime } from \"next\"\n-import OpenAI from \"openai\"\n+// backend/utils/redisClient.js\n+const redis = require('redis');\n+require('dotenv').config();\n \n-export const runtime: ServerRuntime = \"edge\"\n+const client = redis.createClient({\n+    url: process.env.REDIS_URL\n+});\n \n-export async function POST(request: Request) {\n-  const json = await request.json()\n-  const { chatSettings, messages } = json as {\n-    chatSettings: ChatSettings\n-    messages: any[]\n-  }\n+client.on('error', (err) => console.log('Redis Client Error', err));\n \n-  try {\n-    const profile = await getServerProfile()\n+client.connect().then(() => {\n+    console.log('Connected to Redis');\n+}).catch(err => {\n+    console.error('Error connecting to Redis', err);\n+});\n \n-    checkApiKey(profile.openai_api_key, \"OpenAI\")\n+async function storeContext(key, value) {\n+    try {\n+        await client.set(key, value);\n+        console.log('Context stored successfully:', key, value);\n+    } catch (err) {\n+        console.error('Error storing context:', key, err);\n+    }\n+}\n \n-    const openai = new OpenAI({\n-      apiKey: profile.openai_api_key || \"\",\n-      organization: profile.openai_organization_id\n-    })\n-\n-    const response = await openai.chat.completions.create({\n-      model: chatSettings.model,\n-      messages: messages,\n-      temperature: chatSettings.temperature,\n-      max_tokens:\n-        chatSettings.model === \"gpt-4-vision-preview\" ||\n-        chatSettings.model === \"gpt-4o\"\n-          ? 4096\n-          : undefined,\n-      stream: true\n-    })\n-\n-    // Convert the response into a stream\n-    const stream = OpenAIStream(response)\n-\n-    return new StreamingTextResponse(stream)\n-  } catch (error: any) {\n-    let errorMessage = error.message || \"An unexpected error occurred\"\n-    const errorCode = error.status || 500\n-\n-    if (errorMessage.toLowerCase().includes(\"api key not found\")) {\n-      errorMessage =\n-        \"OpenAI API Key not found. Please set it in your profile settings.\"\n-    } else if (errorMessage.toLowerCase().includes(\"incorrect api key\")) {\n-      errorMessage =\n-        \"OpenAI API Key is incorrect. Please fix it in your profile settings.\"\n+async function getContext(key) {\n+    try {\n+        const value = await client.get(key);\n+        console.log('Context retrieved successfully:', key, value);\n+        return value;\n+    } catch (err) {\n+        console.error('Error retrieving context:', key, err);\n     }\n+}\n \n-    return new Response(JSON.stringify({ message: errorMessage }), {\n-      status: errorCode\n-    })\n-  }\n-}\n+module.exports = { storeContext, getContext };\n"
                }
            ],
            "date": 1717879384309,
            "name": "Commit-0",
            "content": "const redis = require('redis');\nrequire('dotenv').config();\n\nconst client = redis.createClient({\n    url: process.env.REDIS_URL\n});\n\nclient.on('error', (err) => console.log('Redis Client Error', err));\n\nclient.connect().then(() => {\n    console.log('Connected to Redis');\n}).catch(err => {\n    console.error('Error connecting to Redis', err);\n});\n\nasync function storeContext(userId, context) {\n    try {\n        await client.hSet(`user:${userId}:context`, context);\n        console.log('Context stored successfully');\n    } catch (err) {\n        console.error('Error storing context:', err);\n    }\n}\n\nasync function getContext(userId) {\n    try {\n        const context = await client.hGetAll(`user:${userId}:context`);\n        console.log('Context retrieved successfully:', context);\n        return context;\n    } catch (err) {\n        console.error('Error retrieving context:', err);\n    }\n}\n\nmodule.exports = { storeContext, getContext };\n"
        }
    ]
}