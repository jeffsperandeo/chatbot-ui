{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1717878815138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717879579625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n const app = express();\n const PORT = process.env.PORT || 3002;\n \n app.use(bodyParser.json());\n-app.use('/auth', authRoutes); // Ensure this line exists and points to authRoutes\n+app.use('/api/auth', authRoutes); // Ensure this line exists and points to authRoutes\n app.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\n app.use('/assistants', assistantsRoutes);\n app.use('/chat', chatRoutes);\n app.use('/command', commandRoutes);\n@@ -25,42 +25,48 @@\n     changeOrigin: true,\n }));\n \n // Redis context management routes\n-app.post('/store-context', (req, res) => {\n+app.post('/store-context', async (req, res) => {\n     const { userId, context } = req.body;\n-    storeContext(userId, context);\n-    res.status(200).send('Context stored successfully');\n+    try {\n+        await storeContext(userId, context);\n+        res.status(200).send('Context stored successfully');\n+    } catch (err) {\n+        res.status(500).send('Error storing context');\n+    }\n });\n \n-app.get('/get-context/:userId', (req, res) => {\n+app.get('/get-context/:userId', async (req, res) => {\n     const userId = req.params.userId;\n-    getContext(userId, (err, context) => {\n-        if (err) {\n-            res.status(500).send('Error retrieving context');\n-        } else {\n-            res.status(200).json(context);\n-        }\n-    });\n+    try {\n+        const context = await getContext(userId);\n+        res.status(200).json(context);\n+    } catch (err) {\n+        res.status(500).send('Error retrieving context');\n+    }\n });\n \n // Test route for checking Redis storage\n-app.post('/test-store-context', (req, res) => {\n+app.post('/test-store-context', async (req, res) => {\n     const { userId, context } = req.body;\n-    storeContext(userId, context);\n-    res.status(200).send('Context stored successfully');\n+    try {\n+        await storeContext(userId, context);\n+        res.status(200).send('Context stored successfully');\n+    } catch (err) {\n+        res.status(500).send('Error storing context');\n+    }\n });\n \n // Test route for checking Redis retrieval\n-app.get('/test-get-context/:userId', (req, res) => {\n+app.get('/test-get-context/:userId', async (req, res) => {\n     const userId = req.params.userId;\n-    getContext(userId, (err, context) => {\n-        if (err) {\n-            res.status(500).send('Error retrieving context');\n-        } else {\n-            res.status(200).json(context);\n-        }\n-    });\n+    try {\n+        const context = await getContext(userId);\n+        res.status(200).json(context);\n+    } catch (err) {\n+        res.status(500).send('Error retrieving context');\n+    }\n });\n \n app.listen(PORT, () => {\n     console.log(`Server running on port ${PORT}`);\n"
                },
                {
                    "date": 1717886487812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// backend/server.js\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n const authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\n"
                },
                {
                    "date": 1717887558597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // backend/server.js\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n-const authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\n+const authRoutes = require('./routes/authRoutes'); \n const dataRoutes = require('./routes/dataRoutes');\n const assistantsRoutes = require('./routes/assistantsRoutes');\n const chatRoutes = require('./routes/chatRoutes');\n const commandRoutes = require('./routes/commandRoutes');\n@@ -13,10 +13,10 @@\n const app = express();\n const PORT = process.env.PORT || 3002;\n \n app.use(bodyParser.json());\n-app.use('/api/auth', authRoutes); // Ensure this line exists and points to authRoutes\n-app.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\n+app.use('/api/auth', authRoutes);\n+app.use('/api', dataRoutes);\n app.use('/assistants', assistantsRoutes);\n app.use('/chat', chatRoutes);\n app.use('/command', commandRoutes);\n \n@@ -27,48 +27,26 @@\n }));\n \n // Redis context management routes\n app.post('/store-context', async (req, res) => {\n-    const { userId, context } = req.body;\n+    const { key, context } = req.body;\n     try {\n-        await storeContext(userId, context);\n+        await storeContext(key, context);\n         res.status(200).send('Context stored successfully');\n     } catch (err) {\n         res.status(500).send('Error storing context');\n     }\n });\n \n-app.get('/get-context/:userId', async (req, res) => {\n-    const userId = req.params.userId;\n+app.get('/get-context/:key', async (req, res) => {\n+    const key = req.params.key;\n     try {\n-        const context = await getContext(userId);\n+        const context = await getContext(key);\n         res.status(200).json(context);\n     } catch (err) {\n         res.status(500).send('Error retrieving context');\n     }\n });\n \n-// Test route for checking Redis storage\n-app.post('/test-store-context', async (req, res) => {\n-    const { userId, context } = req.body;\n-    try {\n-        await storeContext(userId, context);\n-        res.status(200).send('Context stored successfully');\n-    } catch (err) {\n-        res.status(500).send('Error storing context');\n-    }\n-});\n-\n-// Test route for checking Redis retrieval\n-app.get('/test-get-context/:userId', async (req, res) => {\n-    const userId = req.params.userId;\n-    try {\n-        const context = await getContext(userId);\n-        res.status(200).json(context);\n-    } catch (err) {\n-        res.status(500).send('Error retrieving context');\n-    }\n-});\n-\n app.listen(PORT, () => {\n     console.log(`Server running on port ${PORT}`);\n });\n"
                },
                {
                    "date": 1717887848723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // backend/server.js\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n-const authRoutes = require('./routes/authRoutes'); \n+const authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\n const dataRoutes = require('./routes/dataRoutes');\n const assistantsRoutes = require('./routes/assistantsRoutes');\n const chatRoutes = require('./routes/chatRoutes');\n const commandRoutes = require('./routes/commandRoutes');\n@@ -13,10 +13,10 @@\n const app = express();\n const PORT = process.env.PORT || 3002;\n \n app.use(bodyParser.json());\n-app.use('/api/auth', authRoutes);\n-app.use('/api', dataRoutes);\n+app.use('/api/auth', authRoutes); // Ensure this line exists and points to authRoutes\n+app.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\n app.use('/assistants', assistantsRoutes);\n app.use('/chat', chatRoutes);\n app.use('/command', commandRoutes);\n \n@@ -27,26 +27,48 @@\n }));\n \n // Redis context management routes\n app.post('/store-context', async (req, res) => {\n-    const { key, context } = req.body;\n+    const { userId, context } = req.body;\n     try {\n-        await storeContext(key, context);\n+        await storeContext(userId, context);\n         res.status(200).send('Context stored successfully');\n     } catch (err) {\n         res.status(500).send('Error storing context');\n     }\n });\n \n-app.get('/get-context/:key', async (req, res) => {\n-    const key = req.params.key;\n+app.get('/get-context/:userId', async (req, res) => {\n+    const userId = req.params.userId;\n     try {\n-        const context = await getContext(key);\n+        const context = await getContext(userId);\n         res.status(200).json(context);\n     } catch (err) {\n         res.status(500).send('Error retrieving context');\n     }\n });\n \n+// Test route for checking Redis storage\n+app.post('/test-store-context', async (req, res) => {\n+    const { userId, context } = req.body;\n+    try {\n+        await storeContext(userId, context);\n+        res.status(200).send('Context stored successfully');\n+    } catch (err) {\n+        res.status(500).send('Error storing context');\n+    }\n+});\n+\n+// Test route for checking Redis retrieval\n+app.get('/test-get-context/:userId', async (req, res) => {\n+    const userId = req.params.userId;\n+    try {\n+        const context = await getContext(userId);\n+        res.status(200).json(context);\n+    } catch (err) {\n+        res.status(500).send('Error retrieving context');\n+    }\n+});\n+\n app.listen(PORT, () => {\n     console.log(`Server running on port ${PORT}`);\n });\n"
                },
                {
                    "date": 1718024072509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // backend/server.js\n+\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n const authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\n@@ -13,8 +14,10 @@\n const app = express();\n const PORT = process.env.PORT || 3002;\n \n app.use(bodyParser.json());\n+app.use(bodyParser.urlencoded({ extended: true }));\n+\n app.use('/api/auth', authRoutes); // Ensure this line exists and points to authRoutes\n app.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\n app.use('/assistants', assistantsRoutes);\n app.use('/chat', chatRoutes);\n"
                },
                {
                    "date": 1718024268799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n // backend/server.js\n-\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n const authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\n@@ -14,10 +13,8 @@\n const app = express();\n const PORT = process.env.PORT || 3002;\n \n app.use(bodyParser.json());\n-app.use(bodyParser.urlencoded({ extended: true }));\n-\n app.use('/api/auth', authRoutes); // Ensure this line exists and points to authRoutes\n app.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\n app.use('/assistants', assistantsRoutes);\n app.use('/chat', chatRoutes);\n"
                },
                {
                    "date": 1718025476220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // backend/server.js\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n-const authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\n+const authRoutes = require('./routes/authRoutes');\n const dataRoutes = require('./routes/dataRoutes');\n const assistantsRoutes = require('./routes/assistantsRoutes');\n const chatRoutes = require('./routes/chatRoutes');\n const commandRoutes = require('./routes/commandRoutes');\n@@ -13,10 +13,10 @@\n const app = express();\n const PORT = process.env.PORT || 3002;\n \n app.use(bodyParser.json());\n-app.use('/api/auth', authRoutes); // Ensure this line exists and points to authRoutes\n-app.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\n+app.use('/api/auth', authRoutes);\n+app.use('/api', dataRoutes);\n app.use('/assistants', assistantsRoutes);\n app.use('/chat', chatRoutes);\n app.use('/command', commandRoutes);\n \n"
                },
                {
                    "date": 1718052742272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n const assistantsRoutes = require('./routes/assistantsRoutes');\n const chatRoutes = require('./routes/chatRoutes');\n const commandRoutes = require('./routes/commandRoutes');\n const { storeContext, getContext } = require('./utils/redisClient');\n+const supabase = require('./supabaseClient');\n require('dotenv').config();\n \n const app = express();\n const PORT = process.env.PORT || 3002;\n@@ -46,27 +47,18 @@\n         res.status(500).send('Error retrieving context');\n     }\n });\n \n-// Test route for checking Redis storage\n-app.post('/test-store-context', async (req, res) => {\n-    const { userId, context } = req.body;\n-    try {\n-        await storeContext(userId, context);\n-        res.status(200).send('Context stored successfully');\n-    } catch (err) {\n-        res.status(500).send('Error storing context');\n-    }\n-});\n+// Supabase example endpoint\n+app.get('/supabase-example', async (req, res) => {\n+    const { data, error } = await supabase\n+        .from('your_table')\n+        .select('*');\n \n-// Test route for checking Redis retrieval\n-app.get('/test-get-context/:userId', async (req, res) => {\n-    const userId = req.params.userId;\n-    try {\n-        const context = await getContext(userId);\n-        res.status(200).json(context);\n-    } catch (err) {\n-        res.status(500).send('Error retrieving context');\n+    if (error) {\n+        res.status(500).send(error.message);\n+    } else {\n+        res.status(200).json(data);\n     }\n });\n \n app.listen(PORT, () => {\n"
                },
                {
                    "date": 1718053605493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const assistantsRoutes = require('./routes/assistantsRoutes');\n const chatRoutes = require('./routes/chatRoutes');\n const commandRoutes = require('./routes/commandRoutes');\n const { storeContext, getContext } = require('./utils/redisClient');\n-const supabase = require('./supabaseClient');\n+const supabase = require('./supabaseclient');\n require('dotenv').config();\n \n const app = express();\n const PORT = process.env.PORT || 3002;\n"
                },
                {
                    "date": 1718274791584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// backend/server.js\n+// server.js\n const express = require('express');\n const bodyParser = require('body-parser');\n const { createProxyMiddleware } = require('http-proxy-middleware');\n const authRoutes = require('./routes/authRoutes');\n"
                }
            ],
            "date": 1717878815138,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst authRoutes = require('./routes/authRoutes'); // Ensure this path is correct\nconst dataRoutes = require('./routes/dataRoutes');\nconst assistantsRoutes = require('./routes/assistantsRoutes');\nconst chatRoutes = require('./routes/chatRoutes');\nconst commandRoutes = require('./routes/commandRoutes');\nconst { storeContext, getContext } = require('./utils/redisClient');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3002;\n\napp.use(bodyParser.json());\napp.use('/auth', authRoutes); // Ensure this line exists and points to authRoutes\napp.use('/api', dataRoutes); // Ensure this line exists and points to dataRoutes\napp.use('/assistants', assistantsRoutes);\napp.use('/chat', chatRoutes);\napp.use('/command', commandRoutes);\n\n// Proxy for FastAPI backend\napp.use('/chatfusion', createProxyMiddleware({\n    target: 'http://localhost:8000',\n    changeOrigin: true,\n}));\n\n// Redis context management routes\napp.post('/store-context', (req, res) => {\n    const { userId, context } = req.body;\n    storeContext(userId, context);\n    res.status(200).send('Context stored successfully');\n});\n\napp.get('/get-context/:userId', (req, res) => {\n    const userId = req.params.userId;\n    getContext(userId, (err, context) => {\n        if (err) {\n            res.status(500).send('Error retrieving context');\n        } else {\n            res.status(200).json(context);\n        }\n    });\n});\n\n// Test route for checking Redis storage\napp.post('/test-store-context', (req, res) => {\n    const { userId, context } = req.body;\n    storeContext(userId, context);\n    res.status(200).send('Context stored successfully');\n});\n\n// Test route for checking Redis retrieval\napp.get('/test-get-context/:userId', (req, res) => {\n    const userId = req.params.userId;\n    getContext(userId, (err, context) => {\n        if (err) {\n            res.status(500).send('Error retrieving context');\n        } else {\n            res.status(200).json(context);\n        }\n    });\n});\n\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n"
        }
    ]
}