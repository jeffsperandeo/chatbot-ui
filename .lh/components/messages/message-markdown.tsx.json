{
    "sourceFile": "components/messages/message-markdown.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1718045985032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718046370247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// In your component/messages/message-markdown.tsx\n import React, { FC, useEffect, useState } from \"react\";\n import { MessageCodeBlock } from \"./message-codeblock\";\n import MessageMarkdownMemoized from \"./message-markdown-memoized\";\n \n@@ -22,15 +21,15 @@\n     <MessageMarkdownMemoized\n       className=\"prose dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 min-w-full space-y-6 break-words\"\n       remarkPlugins={[remarkGfm, remarkMath]}\n       components={{\n-        p({ children }) {\n+        p({ children }: { children: React.ReactNode }) {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img({ node, ...props }) {\n+        img({ node, ...props }: { node: any; [key: string]: any }) {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code({ node, className, children, ...props }) {\n+        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode; [key: string]: any }) {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n"
                },
                {
                    "date": 1718046708092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,5 +69,5 @@\n     >\n       {content}\n     </MessageMarkdownMemoized>\n   );\n-};\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718046821917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,18 @@\n interface MessageMarkdownProps {\n   content: string;\n }\n \n-export const MessageMarkdown: FC<MessageMarkdownProps> = ({ content }) => {\n+import React, { FC, useEffect, useState } from \"react\";\n+import { MessageCodeBlock } from \"./message-codeblock\";\n+import MessageMarkdownMemoized from \"./message-markdown-memoized\";\n+\n+interface MessageMarkdownProps {\n+  content: string;\n+  remarkPlugins?: any[];\n+}\n+\n+export const MessageMarkdown: FC<MessageMarkdownProps> = ({ content, remarkPlugins = [] }) => {\n   const [remarkGfm, setRemarkGfm] = useState<any>(null);\n   const [remarkMath, setRemarkMath] = useState<any>(null);\n \n   useEffect(() => {\n@@ -19,17 +28,17 @@\n \n   return (\n     <MessageMarkdownMemoized\n       className=\"prose dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 min-w-full space-y-6 break-words\"\n-      remarkPlugins={[remarkGfm, remarkMath]}\n+      remarkPlugins={[...remarkPlugins, remarkGfm, remarkMath]}\n       components={{\n         p({ children }: { children: React.ReactNode }) {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img({ node, ...props }: { node: any; [key: string]: any }) {\n+        img({ node, ...props }: { node: any;[key: string]: any }) {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode; [key: string]: any }) {\n+        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode;[key: string]: any }) {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n"
                },
                {
                    "date": 1718046831803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,9 @@\n interface MessageMarkdownProps {\n   content: string;\n }\n \n-import React, { FC, useEffect, useState } from \"react\";\n-import { MessageCodeBlock } from \"./message-codeblock\";\n-import MessageMarkdownMemoized from \"./message-markdown-memoized\";\n-\n-interface MessageMarkdownProps {\n-  content: string;\n-  remarkPlugins?: any[];\n-}\n-\n-export const MessageMarkdown: FC<MessageMarkdownProps> = ({ content, remarkPlugins = [] }) => {\n+export const MessageMarkdown: FC<MessageMarkdownProps> = ({ content }) => {\n   const [remarkGfm, setRemarkGfm] = useState<any>(null);\n   const [remarkMath, setRemarkMath] = useState<any>(null);\n \n   useEffect(() => {\n@@ -28,17 +19,17 @@\n \n   return (\n     <MessageMarkdownMemoized\n       className=\"prose dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 min-w-full space-y-6 break-words\"\n-      remarkPlugins={[...remarkPlugins, remarkGfm, remarkMath]}\n+      remarkPlugins={[remarkGfm, remarkMath]}\n       components={{\n         p({ children }: { children: React.ReactNode }) {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img({ node, ...props }: { node: any;[key: string]: any }) {\n+        img({ node, ...props }: { node: any; [key: string]: any }) {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode;[key: string]: any }) {\n+        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode; [key: string]: any }) {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n"
                },
                {
                    "date": 1718046876496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,18 +18,18 @@\n   if (!remarkGfm || !remarkMath) return null;\n \n   return (\n     <MessageMarkdownMemoized\n-      className=\"prose dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 min-w-full space-y-6 break-words\"\n+      content={content}\n       remarkPlugins={[remarkGfm, remarkMath]}\n       components={{\n         p({ children }: { children: React.ReactNode }) {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img({ node, ...props }: { node: any; [key: string]: any }) {\n+        img({ node, ...props }: { node: any;[key: string]: any }) {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode; [key: string]: any }) {\n+        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode;[key: string]: any }) {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n@@ -65,9 +65,7 @@\n             />\n           );\n         }\n       }}\n-    >\n-      {content}\n-    </MessageMarkdownMemoized>\n+    />\n   );\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718046911071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,15 @@\n     <MessageMarkdownMemoized\n       content={content}\n       remarkPlugins={[remarkGfm, remarkMath]}\n       components={{\n-        p({ children }: { children: React.ReactNode }) {\n+        p: ({ children }: { children: React.ReactNode }) => {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img({ node, ...props }: { node: any;[key: string]: any }) {\n+        img: ({ node, ...props }: { node: any;[key: string]: any }) => {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode;[key: string]: any }) {\n+        code: ({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode;[key: string]: any }) => {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n"
                },
                {
                    "date": 1718047265281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,18 +18,17 @@\n   if (!remarkGfm || !remarkMath) return null;\n \n   return (\n     <MessageMarkdownMemoized\n-      content={content}\n       remarkPlugins={[remarkGfm, remarkMath]}\n       components={{\n         p: ({ children }: { children: React.ReactNode }) => {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img: ({ node, ...props }: { node: any;[key: string]: any }) => {\n+        img: ({ node, ...props }: { node: any; [key: string]: any }) => {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code: ({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode;[key: string]: any }) => {\n+        code: ({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode; [key: string]: any }) => {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n@@ -65,7 +64,9 @@\n             />\n           );\n         }\n       }}\n-    />\n+    >\n+      {content}\n\\ No newline at end of file\n+    </MessageMarkdownMemoized>\n   );\n-};\n+};\n"
                },
                {
                    "date": 1718048608498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,19 @@\n         },\n         img: ({ node, ...props }: { node: any; [key: string]: any }) => {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n-        code: ({ node, className, children, ...props }: { node: any; className: string; children: React.ReactNode; [key: string]: any }) => {\n+        code: ({\n+          node,\n+          className,\n+          children,\n+          ...props\n+        }: {\n+          node: any;\n+          className: string;\n+          children: React.ReactNode;\n+          [key: string]: any;\n+        }) => {\n           const childArray = React.Children.toArray(children);\n           const firstChild = childArray[0] as React.ReactElement;\n           const firstChildAsString = React.isValidElement(firstChild)\n             ? (firstChild as React.ReactElement).props.children\n@@ -68,5 +78,5 @@\n     >\n       {content}\n     </MessageMarkdownMemoized>\n   );\n-};\n\\ No newline at end of file\n+};\n"
                },
                {
                    "date": 1718048642225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { FC, useEffect, useState } from \"react\";\n import { MessageCodeBlock } from \"./message-codeblock\";\n-import MessageMarkdownMemoized from \"./message-markdown-memoized\";\n+import MessageMarkdownMemoized, { MessageMarkdownMemoizedProps } from \"./message-markdown-memoized\";\n \n interface MessageMarkdownProps {\n   content: string;\n }\n@@ -16,16 +16,18 @@\n   }, []);\n \n   if (!remarkGfm || !remarkMath) return null;\n \n+  const remarkPlugins: MessageMarkdownMemoizedProps[\"remarkPlugins\"] = [remarkGfm, remarkMath];\n+\n   return (\n     <MessageMarkdownMemoized\n-      remarkPlugins={[remarkGfm, remarkMath]}\n+      remarkPlugins={remarkPlugins}\n       components={{\n         p: ({ children }: { children: React.ReactNode }) => {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img: ({ node, ...props }: { node: any; [key: string]: any }) => {\n+        img: ({ node, ...props }: { node: any;[key: string]: any }) => {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n         code: ({\n           node,\n"
                },
                {
                    "date": 1718048667743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { FC, useEffect, useState } from \"react\";\n import { MessageCodeBlock } from \"./message-codeblock\";\n-import MessageMarkdownMemoized, { MessageMarkdownMemoizedProps } from \"./message-markdown-memoized\";\n+import MessageMarkdownMemoized from \"./message-markdown-memoized\";\n \n interface MessageMarkdownProps {\n   content: string;\n }\n@@ -16,18 +16,16 @@\n   }, []);\n \n   if (!remarkGfm || !remarkMath) return null;\n \n-  const remarkPlugins: MessageMarkdownMemoizedProps[\"remarkPlugins\"] = [remarkGfm, remarkMath];\n-\n   return (\n     <MessageMarkdownMemoized\n-      remarkPlugins={remarkPlugins}\n+      remarkPlugins={[remarkGfm, remarkMath]}\n       components={{\n         p: ({ children }: { children: React.ReactNode }) => {\n           return <p className=\"mb-2 last:mb-0\">{children}</p>;\n         },\n-        img: ({ node, ...props }: { node: any;[key: string]: any }) => {\n+        img: ({ node, ...props }: { node: any; [key: string]: any }) => {\n           return <img className=\"max-w-[67%]\" {...props} />;\n         },\n         code: ({\n           node,\n"
                }
            ],
            "date": 1718045985032,
            "name": "Commit-0",
            "content": "// In your component/messages/message-markdown.tsx\nimport React, { FC, useEffect, useState } from \"react\";\nimport { MessageCodeBlock } from \"./message-codeblock\";\nimport MessageMarkdownMemoized from \"./message-markdown-memoized\";\n\ninterface MessageMarkdownProps {\n  content: string;\n}\n\nexport const MessageMarkdown: FC<MessageMarkdownProps> = ({ content }) => {\n  const [remarkGfm, setRemarkGfm] = useState<any>(null);\n  const [remarkMath, setRemarkMath] = useState<any>(null);\n\n  useEffect(() => {\n    import(\"remark-gfm\").then(module => setRemarkGfm(() => module.default));\n    import(\"remark-math\").then(module => setRemarkMath(() => module.default));\n  }, []);\n\n  if (!remarkGfm || !remarkMath) return null;\n\n  return (\n    <MessageMarkdownMemoized\n      className=\"prose dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 min-w-full space-y-6 break-words\"\n      remarkPlugins={[remarkGfm, remarkMath]}\n      components={{\n        p({ children }) {\n          return <p className=\"mb-2 last:mb-0\">{children}</p>;\n        },\n        img({ node, ...props }) {\n          return <img className=\"max-w-[67%]\" {...props} />;\n        },\n        code({ node, className, children, ...props }) {\n          const childArray = React.Children.toArray(children);\n          const firstChild = childArray[0] as React.ReactElement;\n          const firstChildAsString = React.isValidElement(firstChild)\n            ? (firstChild as React.ReactElement).props.children\n            : firstChild;\n\n          if (firstChildAsString === \"▍\") {\n            return <span className=\"mt-1 animate-pulse cursor-default\">▍</span>;\n          }\n\n          if (typeof firstChildAsString === \"string\") {\n            childArray[0] = firstChildAsString.replace(\"`▍`\", \"▍\");\n          }\n\n          const match = /language-(\\w+)/.exec(className || \"\");\n\n          if (\n            typeof firstChildAsString === \"string\" &&\n            !firstChildAsString.includes(\"\\n\")\n          ) {\n            return (\n              <code className={className} {...props}>\n                {childArray}\n              </code>\n            );\n          }\n\n          return (\n            <MessageCodeBlock\n              key={Math.random()}\n              language={(match && match[1]) || \"\"}\n              value={String(childArray).replace(/\\n$/, \"\")}\n              {...props}\n            />\n          );\n        }\n      }}\n    >\n      {content}\n    </MessageMarkdownMemoized>\n  );\n};\n"
        }
    ]
}