{
    "sourceFile": "components/chat/chat-input.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1717780982087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717786898347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,12 @@\n   }, [selectedPreset, selectedAssistant]);\n \n   const handleKeyDown = (event: React.KeyboardEvent) => {\n     if (!isTyping && event.key === \"Enter\" && !event.shiftKey) {\n-      event.preventDefault();\n-      setIsPromptPickerOpen(false);\n-      handleSendMessage(userInput, chatMessages, false);\n+        event.preventDefault();\n+        setIsPromptPickerOpen(false);\n+        onUserInput(userInput); // Call onUserInput with the user input\n+        handleSendMessage(userInput, chatMessages, false);\n     }\n \n     // Consolidate conditions to avoid TypeScript error\n     if (\n"
                },
                {
                    "date": 1717787179183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,120 +170,133 @@\n     handleSendMessage(userInput, chatMessages, false);\n   };\n \n   return (\n-    <>\n-      <div className=\"flex flex-col flex-wrap justify-center gap-2\">\n-        <ChatFilesDisplay />\n+      <>\n+          <div className=\"flex flex-col flex-wrap justify-center gap-2\">\n+              <ChatFilesDisplay />\n \n-        {selectedTools &&\n-          selectedTools.map((tool, index) => (\n-            <div\n-              key={index}\n-              className=\"flex justify-center\"\n-              onClick={() =>\n-                setSelectedTools(\n-                  selectedTools.filter(\n-                    selectedTool => selectedTool.id !== tool.id\n-                  )\n-                )\n-              }\n-            >\n-              <div className=\"flex cursor-pointer items-center justify-center space-x-1 rounded-lg bg-purple-600 px-3 py-1 hover:opacity-50\">\n-                <IconBolt size={20} />\n+              {selectedTools &&\n+                  selectedTools.map((tool, index) => (\n+                      <div\n+                          key={index}\n+                          className=\"flex justify-center\"\n+                          onClick={() =>\n+                              setSelectedTools(\n+                                  selectedTools.filter(\n+                                      selectedTool => selectedTool.id !== tool.id\n+                                  )\n+                              )\n+                          }\n+                      >\n+                          <div className=\"flex cursor-pointer items-center justify-center space-x-1 rounded-lg bg-purple-600 px-3 py-1 hover:opacity-50\">\n+                              <IconBolt size={20} />\n \n-                <div>{tool.name}</div>\n+                              <div>{tool.name}</div>\n+                          </div>\n+                      </div>\n+                  ))}\n+\n+              {selectedAssistant && (\n+                  <div className=\"border-primary mx-auto flex w-fit items-center space-x-2 rounded-lg border p-1.5\">\n+                      {selectedAssistant.image_path && (\n+                          <Image\n+                              className=\"rounded\"\n+                              src={\n+                                  assistantImages.find(\n+                                      img => img.path === selectedAssistant.image_path\n+                                  )?.base64\n+                              }\n+                              width={28}\n+                              height={28}\n+                              alt={selectedAssistant.name}\n+                          />\n+                      )}\n+\n+                      <div className=\"text-sm font-bold\">\n+                          Talking to {selectedAssistant.name}\n+                      </div>\n+                  </div>\n+              )}\n+          </div>\n+\n+          <div className=\"border-input relative mt-3 flex min-h-[60px] w-full items-center justify-center rounded-xl border-2\">\n+              <div className=\"absolute bottom-[76px] left-0 max-h-[300px] w-full overflow-auto rounded-xl dark:border-none\">\n+                  <ChatCommandInput />\n               </div>\n-            </div>\n-          ))}\n \n-        {selectedAssistant && (\n-          <div className=\"border-primary mx-auto flex w-fit items-center space-x-2 rounded-lg border p-1.5\">\n-            {selectedAssistant.image_path && (\n-              <Image\n-                className=\"rounded\"\n-                src={\n-                  assistantImages.find(\n-                    img => img.path === selectedAssistant.image_path\n-                  )?.base64\n-                }\n-                width={28}\n-                height={28}\n-                alt={selectedAssistant.name}\n+              <>\n+                  <IconCirclePlus\n+                      className=\"absolute bottom-[12px] left-3 cursor-pointer p-1 hover:opacity-50\"\n+                      size={32}\n+                      onClick={() => fileInputRef.current?.click()}\n+                  />\n+\n+                  {/* Hidden input to select files from device */}\n+                  <Input\n+                      ref={fileInputRef}\n+                      className=\"hidden\"\n+                      type=\"file\"\n+                      onChange={e => {\n+                          if (!e.target.files) return;\n+                          handleSelectDeviceFile(e.target.files[0]);\n+                      }}\n+                      accept={filesToAccept}\n+                  />\n+              </>\n+\n+              <TextareaAutosize\n+                  textareaRef={chatInputRef}\n+                  className=\"ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring text-md flex w-full resize-none rounded-md border-none bg-transparent px-14 py-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n+                  placeholder={t(\n+                      // `Ask anything. Type \"@\" for assistants, \"/\" for prompts, \"#\" for files, and \"!\" for tools.`\n+                      `Ask anything. Type @  /  #  !`\n+                  )}\n+                  onValueChange={handleInputChange}\n+                  value={userInput}\n+                  minRows={1}\n+                  maxRows={18}\n+                  onKeyDown={handleKeyDown}\n+                  onPaste={handlePaste}\n+                  onCompositionStart={() => setIsTyping(true)}\n+                  onCompositionEnd={() => setIsTyping(false)}\n               />\n-            )}\n \n-            <div className=\"text-sm font-bold\">\n-              Talking to {selectedAssistant.name}\n-            </div>\n+              <div className=\"absolute bottom-[14px] right-3 cursor-pointer hover:opacity-50\">\n+                  {isGenerating ? (\n+                      <IconPlayerStopFilled\n+                          className=\"hover:bg-background animate-pulse rounded bg-transparent p-1\"\n+                          onClick={handleStopMessage}\n+                          size={30}\n+                      />\n+                  ) : (\n+                      <IconSend\n+                          className={cn(\n+                              \"bg-primary text-secondary rounded p-1\",\n+                              !userInput && \"cursor-not-allowed opacity-50\"\n+                          )}\n+                          onClick={() => {\n+                              if (!userInput) return;\n+\n+                              onUserInput(userInput); // Call onUserInput with the user input\n+                              handleSendMessage(userInput, chatMessages, false);\n+                          }}\n+                          size={30}\n+                      />\n+                  )}\n+              </div>\n           </div>\n-        )}\n-      </div>\n+      </>\n+  );\n+};\n \n-      <div className=\"border-input relative mt-3 flex min-h-[60px] w-full items-center justify-center rounded-xl border-2\">\n-        <div className=\"absolute bottom-[76px] left-0 max-h-[300px] w-full overflow-auto rounded-xl dark:border-none\">\n-          <ChatCommandInput />\n-        </div>\n \n-        <>\n-          <IconCirclePlus\n-            className=\"absolute bottom-[12px] left-3 cursor-pointer p-1 hover:opacity-50\"\n-            size={32}\n-            onClick={() => fileInputRef.current?.click()}\n-          />\n \n-          {/* Hidden input to select files from device */}\n-          <Input\n-            ref={fileInputRef}\n-            className=\"hidden\"\n-            type=\"file\"\n-            onChange={e => {\n-              if (!e.target.files) return;\n-              handleSelectDeviceFile(e.target.files[0]);\n-            }}\n-            accept={filesToAccept}\n-          />\n-        </>\n+Summary\n+By following these steps, you can integrate the command handling functionality into your chatbot UI. This approach ensures that the commands are parsed and handled correctly, and the chat UI is updated accordingly. If you need further assistance with specific changes or have more questions, feel free to ask!\n \n-        <TextareaAutosize\n-          textareaRef={chatInputRef}\n-          className=\"ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring text-md flex w-full resize-none rounded-md border-none bg-transparent px-14 py-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n-          placeholder={t(\n-            // `Ask anything. Type \"@\" for assistants, \"/\" for prompts, \"#\" for files, and \"!\" for tools.`\n-            `Ask anything. Type @  /  #  !`\n-          )}\n-          onValueChange={handleInputChange}\n-          value={userInput}\n-          minRows={1}\n-          maxRows={18}\n-          onKeyDown={handleKeyDown}\n-          onPaste={handlePaste}\n-          onCompositionStart={() => setIsTyping(true)}\n-          onCompositionEnd={() => setIsTyping(false)}\n-        />\n \n-        <div className=\"absolute bottom-[14px] right-3 cursor-pointer hover:opacity-50\">\n-          {isGenerating ? (\n-            <IconPlayerStopFilled\n-              className=\"hover:bg-background animate-pulse rounded bg-transparent p-1\"\n-              onClick={handleStopMessage}\n-              size={30}\n-            />\n-          ) : (\n-            <IconSend\n-              className={cn(\n-                \"bg-primary text-secondary rounded p-1\",\n-                !userInput && \"cursor-not-allowed opacity-50\"\n-              )}\n-              onClick={() => {\n-                if (!userInput) return;\n \n-                handleSend();\n-              }}\n-              size={30}\n-            />\n-          )}\n-        </div>\n-      </div>\n-    </>\n-  );\n-};\n+Try again with different context\n+Add context...\n+Avatar for sperandeo.jeff-zcrqa\n+\n"
                },
                {
                    "date": 1717787191020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,16 +287,4 @@\n           </div>\n       </>\n   );\n };\n-\n-\n-\n-Summary\n-By following these steps, you can integrate the command handling functionality into your chatbot UI. This approach ensures that the commands are parsed and handled correctly, and the chat UI is updated accordingly. If you need further assistance with specific changes or have more questions, feel free to ask!\n-\n-\n-\n-Try again with different context\n-Add context...\n-Avatar for sperandeo.jeff-zcrqa\n-\n"
                },
                {
                    "date": 1717787603954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,12 +84,12 @@\n   }, [selectedPreset, selectedAssistant]);\n \n   const handleKeyDown = (event: React.KeyboardEvent) => {\n     if (!isTyping && event.key === \"Enter\" && !event.shiftKey) {\n-        event.preventDefault();\n-        setIsPromptPickerOpen(false);\n-        onUserInput(userInput); // Call onUserInput with the user input\n-        handleSendMessage(userInput, chatMessages, false);\n+      event.preventDefault();\n+      setIsPromptPickerOpen(false);\n+      onUserInput(userInput); // Call onUserInput with the user input\n+      handleSendMessage(userInput, chatMessages, false);\n     }\n \n     // Consolidate conditions to avoid TypeScript error\n     if (\n@@ -164,127 +164,122 @@\n       }\n     }\n   };\n \n-  const handleSend = () => {\n-    onUserInput(userInput);\n-    handleSendMessage(userInput, chatMessages, false);\n-  };\n-\n   return (\n-      <>\n-          <div className=\"flex flex-col flex-wrap justify-center gap-2\">\n-              <ChatFilesDisplay />\n+    <>\n+      <div className=\"flex flex-col flex-wrap justify-center gap-2\">\n+        <ChatFilesDisplay />\n \n-              {selectedTools &&\n-                  selectedTools.map((tool, index) => (\n-                      <div\n-                          key={index}\n-                          className=\"flex justify-center\"\n-                          onClick={() =>\n-                              setSelectedTools(\n-                                  selectedTools.filter(\n-                                      selectedTool => selectedTool.id !== tool.id\n-                                  )\n-                              )\n-                          }\n-                      >\n-                          <div className=\"flex cursor-pointer items-center justify-center space-x-1 rounded-lg bg-purple-600 px-3 py-1 hover:opacity-50\">\n-                              <IconBolt size={20} />\n+        {selectedTools &&\n+          selectedTools.map((tool, index) => (\n+            <div\n+              key={index}\n+              className=\"flex justify-center\"\n+              onClick={() =>\n+                setSelectedTools(\n+                  selectedTools.filter(\n+                    selectedTool => selectedTool.id !== tool.id\n+                  )\n+                )\n+              }\n+            >\n+              <div className=\"flex cursor-pointer items-center justify-center space-x-1 rounded-lg bg-purple-600 px-3 py-1 hover:opacity-50\">\n+                <IconBolt size={20} />\n \n-                              <div>{tool.name}</div>\n-                          </div>\n-                      </div>\n-                  ))}\n+                <div>{tool.name}</div>\n+              </div>\n+            </div>\n+          ))}\n \n-              {selectedAssistant && (\n-                  <div className=\"border-primary mx-auto flex w-fit items-center space-x-2 rounded-lg border p-1.5\">\n-                      {selectedAssistant.image_path && (\n-                          <Image\n-                              className=\"rounded\"\n-                              src={\n-                                  assistantImages.find(\n-                                      img => img.path === selectedAssistant.image_path\n-                                  )?.base64\n-                              }\n-                              width={28}\n-                              height={28}\n-                              alt={selectedAssistant.name}\n-                          />\n-                      )}\n+        {selectedAssistant && (\n+          <div className=\"border-primary mx-auto flex w-fit items-center space-x-2 rounded-lg border p-1.5\">\n+            {selectedAssistant.image_path && (\n+              <Image\n+                className=\"rounded\"\n+                src={\n+                  assistantImages.find(\n+                    img => img.path === selectedAssistant.image_path\n+                  )?.base64\n+                }\n+                width={28}\n+                height={28}\n+                alt={selectedAssistant.name}\n+              />\n+            )}\n \n-                      <div className=\"text-sm font-bold\">\n-                          Talking to {selectedAssistant.name}\n-                      </div>\n-                  </div>\n-              )}\n+            <div className=\"text-sm font-bold\">\n+              Talking to {selectedAssistant.name}\n+            </div>\n           </div>\n+        )}\n+      </div>\n \n-          <div className=\"border-input relative mt-3 flex min-h-[60px] w-full items-center justify-center rounded-xl border-2\">\n-              <div className=\"absolute bottom-[76px] left-0 max-h-[300px] w-full overflow-auto rounded-xl dark:border-none\">\n-                  <ChatCommandInput />\n-              </div>\n+      <div className=\"border-input relative mt-3 flex min-h-[60px] w-full items-center justify-center rounded-xl border-2\">\n+        <div className=\"absolute bottom-[76px] left-0 max-h-[300px] w-full overflow-auto rounded-xl dark:border-none\">\n+          <ChatCommandInput />\n+        </div>\n \n-              <>\n-                  <IconCirclePlus\n-                      className=\"absolute bottom-[12px] left-3 cursor-pointer p-1 hover:opacity-50\"\n-                      size={32}\n-                      onClick={() => fileInputRef.current?.click()}\n-                  />\n+        <>\n+          <IconCirclePlus\n+            className=\"absolute bottom-[12px] left-3 cursor-pointer p-1 hover:opacity-50\"\n+            size={32}\n+            onClick={() => fileInputRef.current?.click()}\n+          />\n \n-                  {/* Hidden input to select files from device */}\n-                  <Input\n-                      ref={fileInputRef}\n-                      className=\"hidden\"\n-                      type=\"file\"\n-                      onChange={e => {\n-                          if (!e.target.files) return;\n-                          handleSelectDeviceFile(e.target.files[0]);\n-                      }}\n-                      accept={filesToAccept}\n-                  />\n-              </>\n+          {/* Hidden input to select files from device */}\n+          <Input\n+            ref={fileInputRef}\n+            className=\"hidden\"\n+            type=\"file\"\n+            onChange={e => {\n+              if (!e.target.files) return;\n+              handleSelectDeviceFile(e.target.files[0]);\n+            }}\n+            accept={filesToAccept}\n+          />\n+        </>\n \n-              <TextareaAutosize\n-                  textareaRef={chatInputRef}\n-                  className=\"ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring text-md flex w-full resize-none rounded-md border-none bg-transparent px-14 py-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n-                  placeholder={t(\n-                      // `Ask anything. Type \"@\" for assistants, \"/\" for prompts, \"#\" for files, and \"!\" for tools.`\n-                      `Ask anything. Type @  /  #  !`\n-                  )}\n-                  onValueChange={handleInputChange}\n-                  value={userInput}\n-                  minRows={1}\n-                  maxRows={18}\n-                  onKeyDown={handleKeyDown}\n-                  onPaste={handlePaste}\n-                  onCompositionStart={() => setIsTyping(true)}\n-                  onCompositionEnd={() => setIsTyping(false)}\n-              />\n+        <TextareaAutosize\n+          textareaRef={chatInputRef}\n+          className=\"ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring text-md flex w-full resize-none rounded-md border-none bg-transparent px-14 py-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n+          placeholder={t(\n+            // `Ask anything. Type \"@\" for assistants, \"/\" for prompts, \"#\" for files, and \"!\" for tools.`\n+            `Ask anything. Type @  /  #  !`\n+          )}\n+          onValueChange={handleInputChange}\n+          value={userInput}\n+          minRows={1}\n+          maxRows={18}\n+          onKeyDown={handleKeyDown}\n+          onPaste={handlePaste}\n+          onCompositionStart={() => setIsTyping(true)}\n+          onCompositionEnd={() => setIsTyping(false)}\n+        />\n \n-              <div className=\"absolute bottom-[14px] right-3 cursor-pointer hover:opacity-50\">\n-                  {isGenerating ? (\n-                      <IconPlayerStopFilled\n-                          className=\"hover:bg-background animate-pulse rounded bg-transparent p-1\"\n-                          onClick={handleStopMessage}\n-                          size={30}\n-                      />\n-                  ) : (\n-                      <IconSend\n-                          className={cn(\n-                              \"bg-primary text-secondary rounded p-1\",\n-                              !userInput && \"cursor-not-allowed opacity-50\"\n-                          )}\n-                          onClick={() => {\n-                              if (!userInput) return;\n+        <div className=\"absolute bottom-[14px] right-3 cursor-pointer hover:opacity-50\">\n+          {isGenerating ? (\n+            <IconPlayerStopFilled\n+              className=\"hover:bg-background animate-pulse rounded bg-transparent p-1\"\n+              onClick={handleStopMessage}\n+              size={30}\n+            />\n+          ) : (\n+            <IconSend\n+              className={cn(\n+                \"bg-primary text-secondary rounded p-1\",\n+                !userInput && \"cursor-not-allowed opacity-50\"\n+              )}\n+              onClick={() => {\n+                if (!userInput) return;\n \n-                              onUserInput(userInput); // Call onUserInput with the user input\n-                              handleSendMessage(userInput, chatMessages, false);\n-                          }}\n-                          size={30}\n-                      />\n-                  )}\n-              </div>\n-          </div>\n-      </>\n+                onUserInput(userInput); // Call onUserInput with the user input\n+                handleSendMessage(userInput, chatMessages, false);\n+              }}\n+              size={30}\n+            />\n+          )}\n+        </div>\n+      </div>\n+    </>\n   );\n };\n"
                },
                {
                    "date": 1717795041443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,37 @@\n-import { ChatbotUIContext } from \"@/context/context\";\n-import useHotkey from \"@/lib/hooks/use-hotkey\";\n-import { LLM_LIST } from \"@/lib/models/llm/llm-list\";\n-import { cn } from \"@/lib/utils\";\n+import { ChatbotUIContext } from \"@/context/context\"\n+import useHotkey from \"@/lib/hooks/use-hotkey\"\n+import { LLM_LIST } from \"@/lib/models/llm/llm-list\"\n+import { cn } from \"@/lib/utils\"\n import {\n   IconBolt,\n   IconCirclePlus,\n   IconPlayerStopFilled,\n   IconSend\n-} from \"@tabler/icons-react\";\n-import Image from \"next/image\";\n-import { FC, useContext, useEffect, useRef, useState } from \"react\";\n-import { useTranslation } from \"react-i18next\";\n-import { toast } from \"sonner\";\n-import { Input } from \"../ui/input\";\n-import { TextareaAutosize } from \"../ui/textarea-autosize\";\n-import { ChatCommandInput } from \"./chat-command-input\";\n-import { ChatFilesDisplay } from \"./chat-files-display\";\n-import { useChatHandler } from \"./chat-hooks/use-chat-handler\";\n-import { useChatHistoryHandler } from \"./chat-hooks/use-chat-history\";\n-import { usePromptAndCommand } from \"./chat-hooks/use-prompt-and-command\";\n-import { useSelectFileHandler } from \"./chat-hooks/use-select-file-handler\";\n+} from \"@tabler/icons-react\"\n+import Image from \"next/image\"\n+import { FC, useContext, useEffect, useRef, useState } from \"react\"\n+import { useTranslation } from \"react-i18next\"\n+import { toast } from \"sonner\"\n+import { Input } from \"../ui/input\"\n+import { TextareaAutosize } from \"../ui/textarea-autosize\"\n+import { ChatCommandInput } from \"./chat-command-input\"\n+import { ChatFilesDisplay } from \"./chat-files-display\"\n+import { useChatHandler } from \"./chat-hooks/use-chat-handler\"\n+import { useChatHistoryHandler } from \"./chat-hooks/use-chat-history\"\n+import { usePromptAndCommand } from \"./chat-hooks/use-prompt-and-command\"\n+import { useSelectFileHandler } from \"./chat-hooks/use-select-file-handler\"\n \n-interface ChatInputProps {\n-  onUserInput: (input: string) => void;\n-}\n+interface ChatInputProps {}\n \n-export const ChatInput: FC<ChatInputProps> = ({ onUserInput }) => {\n-  const { t } = useTranslation();\n+export const ChatInput: FC<ChatInputProps> = ({}) => {\n+  const { t } = useTranslation()\n \n   useHotkey(\"l\", () => {\n-    handleFocusChatInput();\n-  });\n+    handleFocusChatInput()\n+  })\n \n-  const [isTyping, setIsTyping] = useState<boolean>(false);\n+  const [isTyping, setIsTyping] = useState<boolean>(false)\n \n   const {\n     isAssistantPickerOpen,\n     focusAssistant,\n@@ -56,40 +54,39 @@\n     chatSettings,\n     selectedTools,\n     setSelectedTools,\n     assistantImages\n-  } = useContext(ChatbotUIContext);\n+  } = useContext(ChatbotUIContext)\n \n   const {\n     chatInputRef,\n     handleSendMessage,\n     handleStopMessage,\n     handleFocusChatInput\n-  } = useChatHandler();\n+  } = useChatHandler()\n \n-  const { handleInputChange } = usePromptAndCommand();\n+  const { handleInputChange } = usePromptAndCommand()\n \n-  const { filesToAccept, handleSelectDeviceFile } = useSelectFileHandler();\n+  const { filesToAccept, handleSelectDeviceFile } = useSelectFileHandler()\n \n   const {\n     setNewMessageContentToNextUserMessage,\n     setNewMessageContentToPreviousUserMessage\n-  } = useChatHistoryHandler();\n+  } = useChatHistoryHandler()\n \n-  const fileInputRef = useRef<HTMLInputElement>(null);\n+  const fileInputRef = useRef<HTMLInputElement>(null)\n \n   useEffect(() => {\n     setTimeout(() => {\n-      handleFocusChatInput();\n-    }, 200); // FIX: hacky\n-  }, [selectedPreset, selectedAssistant]);\n+      handleFocusChatInput()\n+    }, 200) // FIX: hacky\n+  }, [selectedPreset, selectedAssistant])\n \n   const handleKeyDown = (event: React.KeyboardEvent) => {\n     if (!isTyping && event.key === \"Enter\" && !event.shiftKey) {\n-      event.preventDefault();\n-      setIsPromptPickerOpen(false);\n-      onUserInput(userInput); // Call onUserInput with the user input\n-      handleSendMessage(userInput, chatMessages, false);\n+      event.preventDefault()\n+      setIsPromptPickerOpen(false)\n+      handleSendMessage(userInput, chatMessages, false)\n     }\n \n     // Consolidate conditions to avoid TypeScript error\n     if (\n@@ -102,69 +99,69 @@\n         event.key === \"Tab\" ||\n         event.key === \"ArrowUp\" ||\n         event.key === \"ArrowDown\"\n       ) {\n-        event.preventDefault();\n+        event.preventDefault()\n         // Toggle focus based on picker type\n-        if (isPromptPickerOpen) setFocusPrompt(!focusPrompt);\n-        if (isFilePickerOpen) setFocusFile(!focusFile);\n-        if (isToolPickerOpen) setFocusTool(!focusTool);\n-        if (isAssistantPickerOpen) setFocusAssistant(!focusAssistant);\n+        if (isPromptPickerOpen) setFocusPrompt(!focusPrompt)\n+        if (isFilePickerOpen) setFocusFile(!focusFile)\n+        if (isToolPickerOpen) setFocusTool(!focusTool)\n+        if (isAssistantPickerOpen) setFocusAssistant(!focusAssistant)\n       }\n     }\n \n     if (event.key === \"ArrowUp\" && event.shiftKey && event.ctrlKey) {\n-      event.preventDefault();\n-      setNewMessageContentToPreviousUserMessage();\n+      event.preventDefault()\n+      setNewMessageContentToPreviousUserMessage()\n     }\n \n     if (event.key === \"ArrowDown\" && event.shiftKey && event.ctrlKey) {\n-      event.preventDefault();\n-      setNewMessageContentToNextUserMessage();\n+      event.preventDefault()\n+      setNewMessageContentToNextUserMessage()\n     }\n \n     //use shift+ctrl+up and shift+ctrl+down to navigate through chat history\n     if (event.key === \"ArrowUp\" && event.shiftKey && event.ctrlKey) {\n-      event.preventDefault();\n-      setNewMessageContentToPreviousUserMessage();\n+      event.preventDefault()\n+      setNewMessageContentToPreviousUserMessage()\n     }\n \n     if (event.key === \"ArrowDown\" && event.shiftKey && event.ctrlKey) {\n-      event.preventDefault();\n-      setNewMessageContentToNextUserMessage();\n+      event.preventDefault()\n+      setNewMessageContentToNextUserMessage()\n     }\n \n     if (\n       isAssistantPickerOpen &&\n       (event.key === \"Tab\" ||\n         event.key === \"ArrowUp\" ||\n         event.key === \"ArrowDown\")\n     ) {\n-      event.preventDefault();\n-      setFocusAssistant(!focusAssistant);\n+      event.preventDefault()\n+      setFocusAssistant(!focusAssistant)\n     }\n-  };\n+  }\n \n   const handlePaste = (event: React.ClipboardEvent) => {\n     const imagesAllowed = LLM_LIST.find(\n       llm => llm.modelId === chatSettings?.model\n-    )?.imageInput;\n+    )?.imageInput\n \n-    const items = event.clipboardData.items;\n+    const items = event.clipboardData.items\n     for (const item of items) {\n       if (item.type.indexOf(\"image\") === 0) {\n         if (!imagesAllowed) {\n           toast.error(\n             `Images are not supported for this model. Use models like GPT-4 Vision instead.`\n-          );\n-          return;\n+          )\n+          return\n         }\n-        const file = item.getAsFile();\n-        if (!file) return;\n-        handleSelectDeviceFile(file);\n+        const file = item.getAsFile()\n+        if (!file) return\n+        handleSelectDeviceFile(file)\n       }\n     }\n-  };\n+  }\n \n   return (\n     <>\n       <div className=\"flex flex-col flex-wrap justify-center gap-2\">\n@@ -231,10 +228,10 @@\n             ref={fileInputRef}\n             className=\"hidden\"\n             type=\"file\"\n             onChange={e => {\n-              if (!e.target.files) return;\n-              handleSelectDeviceFile(e.target.files[0]);\n+              if (!e.target.files) return\n+              handleSelectDeviceFile(e.target.files[0])\n             }}\n             accept={filesToAccept}\n           />\n         </>\n@@ -269,17 +266,16 @@\n                 \"bg-primary text-secondary rounded p-1\",\n                 !userInput && \"cursor-not-allowed opacity-50\"\n               )}\n               onClick={() => {\n-                if (!userInput) return;\n+                if (!userInput) return\n \n-                onUserInput(userInput); // Call onUserInput with the user input\n-                handleSendMessage(userInput, chatMessages, false);\n+                handleSendMessage(userInput, chatMessages, false)\n               }}\n               size={30}\n             />\n           )}\n         </div>\n       </div>\n     </>\n-  );\n-};\n+  )\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1717780982087,
            "name": "Commit-0",
            "content": "import { ChatbotUIContext } from \"@/context/context\";\nimport useHotkey from \"@/lib/hooks/use-hotkey\";\nimport { LLM_LIST } from \"@/lib/models/llm/llm-list\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconBolt,\n  IconCirclePlus,\n  IconPlayerStopFilled,\n  IconSend\n} from \"@tabler/icons-react\";\nimport Image from \"next/image\";\nimport { FC, useContext, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { Input } from \"../ui/input\";\nimport { TextareaAutosize } from \"../ui/textarea-autosize\";\nimport { ChatCommandInput } from \"./chat-command-input\";\nimport { ChatFilesDisplay } from \"./chat-files-display\";\nimport { useChatHandler } from \"./chat-hooks/use-chat-handler\";\nimport { useChatHistoryHandler } from \"./chat-hooks/use-chat-history\";\nimport { usePromptAndCommand } from \"./chat-hooks/use-prompt-and-command\";\nimport { useSelectFileHandler } from \"./chat-hooks/use-select-file-handler\";\n\ninterface ChatInputProps {\n  onUserInput: (input: string) => void;\n}\n\nexport const ChatInput: FC<ChatInputProps> = ({ onUserInput }) => {\n  const { t } = useTranslation();\n\n  useHotkey(\"l\", () => {\n    handleFocusChatInput();\n  });\n\n  const [isTyping, setIsTyping] = useState<boolean>(false);\n\n  const {\n    isAssistantPickerOpen,\n    focusAssistant,\n    setFocusAssistant,\n    userInput,\n    chatMessages,\n    isGenerating,\n    selectedPreset,\n    selectedAssistant,\n    focusPrompt,\n    setFocusPrompt,\n    focusFile,\n    focusTool,\n    setFocusTool,\n    isToolPickerOpen,\n    isPromptPickerOpen,\n    setIsPromptPickerOpen,\n    isFilePickerOpen,\n    setFocusFile,\n    chatSettings,\n    selectedTools,\n    setSelectedTools,\n    assistantImages\n  } = useContext(ChatbotUIContext);\n\n  const {\n    chatInputRef,\n    handleSendMessage,\n    handleStopMessage,\n    handleFocusChatInput\n  } = useChatHandler();\n\n  const { handleInputChange } = usePromptAndCommand();\n\n  const { filesToAccept, handleSelectDeviceFile } = useSelectFileHandler();\n\n  const {\n    setNewMessageContentToNextUserMessage,\n    setNewMessageContentToPreviousUserMessage\n  } = useChatHistoryHandler();\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      handleFocusChatInput();\n    }, 200); // FIX: hacky\n  }, [selectedPreset, selectedAssistant]);\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (!isTyping && event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      setIsPromptPickerOpen(false);\n      handleSendMessage(userInput, chatMessages, false);\n    }\n\n    // Consolidate conditions to avoid TypeScript error\n    if (\n      isPromptPickerOpen ||\n      isFilePickerOpen ||\n      isToolPickerOpen ||\n      isAssistantPickerOpen\n    ) {\n      if (\n        event.key === \"Tab\" ||\n        event.key === \"ArrowUp\" ||\n        event.key === \"ArrowDown\"\n      ) {\n        event.preventDefault();\n        // Toggle focus based on picker type\n        if (isPromptPickerOpen) setFocusPrompt(!focusPrompt);\n        if (isFilePickerOpen) setFocusFile(!focusFile);\n        if (isToolPickerOpen) setFocusTool(!focusTool);\n        if (isAssistantPickerOpen) setFocusAssistant(!focusAssistant);\n      }\n    }\n\n    if (event.key === \"ArrowUp\" && event.shiftKey && event.ctrlKey) {\n      event.preventDefault();\n      setNewMessageContentToPreviousUserMessage();\n    }\n\n    if (event.key === \"ArrowDown\" && event.shiftKey && event.ctrlKey) {\n      event.preventDefault();\n      setNewMessageContentToNextUserMessage();\n    }\n\n    //use shift+ctrl+up and shift+ctrl+down to navigate through chat history\n    if (event.key === \"ArrowUp\" && event.shiftKey && event.ctrlKey) {\n      event.preventDefault();\n      setNewMessageContentToPreviousUserMessage();\n    }\n\n    if (event.key === \"ArrowDown\" && event.shiftKey && event.ctrlKey) {\n      event.preventDefault();\n      setNewMessageContentToNextUserMessage();\n    }\n\n    if (\n      isAssistantPickerOpen &&\n      (event.key === \"Tab\" ||\n        event.key === \"ArrowUp\" ||\n        event.key === \"ArrowDown\")\n    ) {\n      event.preventDefault();\n      setFocusAssistant(!focusAssistant);\n    }\n  };\n\n  const handlePaste = (event: React.ClipboardEvent) => {\n    const imagesAllowed = LLM_LIST.find(\n      llm => llm.modelId === chatSettings?.model\n    )?.imageInput;\n\n    const items = event.clipboardData.items;\n    for (const item of items) {\n      if (item.type.indexOf(\"image\") === 0) {\n        if (!imagesAllowed) {\n          toast.error(\n            `Images are not supported for this model. Use models like GPT-4 Vision instead.`\n          );\n          return;\n        }\n        const file = item.getAsFile();\n        if (!file) return;\n        handleSelectDeviceFile(file);\n      }\n    }\n  };\n\n  const handleSend = () => {\n    onUserInput(userInput);\n    handleSendMessage(userInput, chatMessages, false);\n  };\n\n  return (\n    <>\n      <div className=\"flex flex-col flex-wrap justify-center gap-2\">\n        <ChatFilesDisplay />\n\n        {selectedTools &&\n          selectedTools.map((tool, index) => (\n            <div\n              key={index}\n              className=\"flex justify-center\"\n              onClick={() =>\n                setSelectedTools(\n                  selectedTools.filter(\n                    selectedTool => selectedTool.id !== tool.id\n                  )\n                )\n              }\n            >\n              <div className=\"flex cursor-pointer items-center justify-center space-x-1 rounded-lg bg-purple-600 px-3 py-1 hover:opacity-50\">\n                <IconBolt size={20} />\n\n                <div>{tool.name}</div>\n              </div>\n            </div>\n          ))}\n\n        {selectedAssistant && (\n          <div className=\"border-primary mx-auto flex w-fit items-center space-x-2 rounded-lg border p-1.5\">\n            {selectedAssistant.image_path && (\n              <Image\n                className=\"rounded\"\n                src={\n                  assistantImages.find(\n                    img => img.path === selectedAssistant.image_path\n                  )?.base64\n                }\n                width={28}\n                height={28}\n                alt={selectedAssistant.name}\n              />\n            )}\n\n            <div className=\"text-sm font-bold\">\n              Talking to {selectedAssistant.name}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"border-input relative mt-3 flex min-h-[60px] w-full items-center justify-center rounded-xl border-2\">\n        <div className=\"absolute bottom-[76px] left-0 max-h-[300px] w-full overflow-auto rounded-xl dark:border-none\">\n          <ChatCommandInput />\n        </div>\n\n        <>\n          <IconCirclePlus\n            className=\"absolute bottom-[12px] left-3 cursor-pointer p-1 hover:opacity-50\"\n            size={32}\n            onClick={() => fileInputRef.current?.click()}\n          />\n\n          {/* Hidden input to select files from device */}\n          <Input\n            ref={fileInputRef}\n            className=\"hidden\"\n            type=\"file\"\n            onChange={e => {\n              if (!e.target.files) return;\n              handleSelectDeviceFile(e.target.files[0]);\n            }}\n            accept={filesToAccept}\n          />\n        </>\n\n        <TextareaAutosize\n          textareaRef={chatInputRef}\n          className=\"ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring text-md flex w-full resize-none rounded-md border-none bg-transparent px-14 py-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n          placeholder={t(\n            // `Ask anything. Type \"@\" for assistants, \"/\" for prompts, \"#\" for files, and \"!\" for tools.`\n            `Ask anything. Type @  /  #  !`\n          )}\n          onValueChange={handleInputChange}\n          value={userInput}\n          minRows={1}\n          maxRows={18}\n          onKeyDown={handleKeyDown}\n          onPaste={handlePaste}\n          onCompositionStart={() => setIsTyping(true)}\n          onCompositionEnd={() => setIsTyping(false)}\n        />\n\n        <div className=\"absolute bottom-[14px] right-3 cursor-pointer hover:opacity-50\">\n          {isGenerating ? (\n            <IconPlayerStopFilled\n              className=\"hover:bg-background animate-pulse rounded bg-transparent p-1\"\n              onClick={handleStopMessage}\n              size={30}\n            />\n          ) : (\n            <IconSend\n              className={cn(\n                \"bg-primary text-secondary rounded p-1\",\n                !userInput && \"cursor-not-allowed opacity-50\"\n              )}\n              onClick={() => {\n                if (!userInput) return;\n\n                handleSend();\n              }}\n              size={30}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n"
        }
    ]
}