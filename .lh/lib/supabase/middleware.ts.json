{
    "sourceFile": "lib/supabase/middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1718039222161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718042125362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,61 @@\n-import { createClient } from \"@/lib/supabase/middleware\"\n-import { i18nRouter } from \"next-i18n-router\"\n+import { createServerClient, type CookieOptions } from \"@supabase/ssr\"\n import { NextResponse, type NextRequest } from \"next/server\"\n-import i18nConfig from \"./i18nConfig\"\n \n-export async function middleware(request: NextRequest) {\n-  const i18nResult = i18nRouter(request, i18nConfig)\n-  if (i18nResult) return i18nResult\n+export const createClient = (request: NextRequest) => {\n+  // Create an unmodified response\n+  let response = NextResponse.next({\n+    request: {\n+      headers: request.headers\n+    }\n+  })\n \n-  try {\n-    const { supabase, response } = createClient(request)\n-\n-    const session = await supabase.auth.getSession()\n-\n-    const redirectToChat = session && request.nextUrl.pathname === \"/\"\n-\n-    if (redirectToChat) {\n-      const { data: homeWorkspace, error } = await supabase\n-        .from(\"workspaces\")\n-        .select(\"*\")\n-        .eq(\"user_id\", session.data.session?.user.id)\n-        .eq(\"is_home\", true)\n-        .single()\n-\n-      if (!homeWorkspace) {\n-        throw new Error(error?.message)\n+  const supabase = createServerClient(\n+    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n+    {\n+      cookies: {\n+        get(name: string) {\n+          return request.cookies.get(name)?.value\n+        },\n+        set(name: string, value: string, options: CookieOptions) {\n+          // If the cookie is updated, update the cookies for the request and response\n+          request.cookies.set({\n+            name,\n+            value,\n+            ...options\n+          })\n+          response = NextResponse.next({\n+            request: {\n+              headers: request.headers\n+            }\n+          })\n+          response.cookies.set({\n+            name,\n+            value,\n+            ...options\n+          })\n+        },\n+        remove(name: string, options: CookieOptions) {\n+          // If the cookie is removed, update the cookies for the request and response\n+          request.cookies.set({\n+            name,\n+            value: \"\",\n+            ...options\n+          })\n+          response = NextResponse.next({\n+            request: {\n+              headers: request.headers\n+            }\n+          })\n+          response.cookies.set({\n+            name,\n+            value: \"\",\n+            ...options\n+          })\n+        }\n       }\n-\n-      return NextResponse.redirect(\n-        new URL(`/${homeWorkspace.id}/chat`, request.url)\n-      )\n     }\n+  )\n \n-    return response\n-  } catch (e) {\n-    return NextResponse.next({\n-      request: {\n-        headers: request.headers\n-      }\n-    })\n-  }\n+  return { supabase, response }\n }\n-\n-export const config = {\n-  matcher: \"/((?!api|static|.*\\\\..*|_next|auth).*)\"\n-}\n"
                }
            ],
            "date": 1718039222161,
            "name": "Commit-0",
            "content": "import { createClient } from \"@/lib/supabase/middleware\"\nimport { i18nRouter } from \"next-i18n-router\"\nimport { NextResponse, type NextRequest } from \"next/server\"\nimport i18nConfig from \"./i18nConfig\"\n\nexport async function middleware(request: NextRequest) {\n  const i18nResult = i18nRouter(request, i18nConfig)\n  if (i18nResult) return i18nResult\n\n  try {\n    const { supabase, response } = createClient(request)\n\n    const session = await supabase.auth.getSession()\n\n    const redirectToChat = session && request.nextUrl.pathname === \"/\"\n\n    if (redirectToChat) {\n      const { data: homeWorkspace, error } = await supabase\n        .from(\"workspaces\")\n        .select(\"*\")\n        .eq(\"user_id\", session.data.session?.user.id)\n        .eq(\"is_home\", true)\n        .single()\n\n      if (!homeWorkspace) {\n        throw new Error(error?.message)\n      }\n\n      return NextResponse.redirect(\n        new URL(`/${homeWorkspace.id}/chat`, request.url)\n      )\n    }\n\n    return response\n  } catch (e) {\n    return NextResponse.next({\n      request: {\n        headers: request.headers\n      }\n    })\n  }\n}\n\nexport const config = {\n  matcher: \"/((?!api|static|.*\\\\..*|_next|auth).*)\"\n}\n"
        }
    ]
}