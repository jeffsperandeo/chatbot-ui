{
    "sourceFile": "lib/server/server-chat-helpers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1718042448691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718042467533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,79 +65,12 @@\n \n   return profile\n }\n \n-export function checkApiKey(apiKey: string | null, keyName: string) {\n-  if (apiKey === null || apiKey === \"\") {\n-    throw new Error(`${keyName} API Key not found`)\n-  }\n-}\n-import { Database, Tables } from \"@/supabase/types\"\n-import { VALID_ENV_KEYS } from \"@/types/valid-keys\"\n-import { createServerClient } from \"@supabase/ssr\"\n-import { cookies } from \"next/headers\"\n-\n-export async function getServerProfile() {\n-  const cookieStore = cookies()\n-  const supabase = createServerClient<Database>(\n-    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n-    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n-    {\n-      cookies: {\n-        get(name: string) {\n-          return cookieStore.get(name)?.value\n-        }\n-      }\n+export function createResponse(data: object, status: number): Response {\n+  return new Response(JSON.stringify(data), {\n+    status,\n+    headers: {\n+      \"Content-Type\": \"application/json\"\n     }\n-  )\n-\n-  const user = (await supabase.auth.getUser()).data.user\n-  if (!user) {\n-    throw new Error(\"User not found\")\n-  }\n-\n-  const { data: profile } = await supabase\n-    .from(\"profiles\")\n-    .select(\"*\")\n-    .eq(\"user_id\", user.id)\n-    .single()\n-\n-  if (!profile) {\n-    throw new Error(\"Profile not found\")\n-  }\n-\n-  const profileWithKeys = addApiKeysToProfile(profile)\n-\n-  return profileWithKeys\n+  })\n }\n-\n-function addApiKeysToProfile(profile: Tables<\"profiles\">) {\n-  const apiKeys = {\n-    [VALID_ENV_KEYS.OPENAI_API_KEY]: \"openai_api_key\",\n-    [VALID_ENV_KEYS.ANTHROPIC_API_KEY]: \"anthropic_api_key\",\n-    [VALID_ENV_KEYS.GOOGLE_GEMINI_API_KEY]: \"google_gemini_api_key\",\n-    [VALID_ENV_KEYS.MISTRAL_API_KEY]: \"mistral_api_key\",\n-    [VALID_ENV_KEYS.GROQ_API_KEY]: \"groq_api_key\",\n-    [VALID_ENV_KEYS.PERPLEXITY_API_KEY]: \"perplexity_api_key\",\n-    [VALID_ENV_KEYS.AZURE_OPENAI_API_KEY]: \"azure_openai_api_key\",\n-    [VALID_ENV_KEYS.OPENROUTER_API_KEY]: \"openrouter_api_key\",\n-\n-    [VALID_ENV_KEYS.OPENAI_ORGANIZATION_ID]: \"openai_organization_id\",\n-\n-    [VALID_ENV_KEYS.AZURE_OPENAI_ENDPOINT]: \"azure_openai_endpoint\",\n-    [VALID_ENV_KEYS.AZURE_GPT_35_TURBO_NAME]: \"azure_openai_35_turbo_id\",\n-    [VALID_ENV_KEYS.AZURE_GPT_45_VISION_NAME]: \"azure_openai_45_vision_id\",\n-    [VALID_ENV_KEYS.AZURE_GPT_45_TURBO_NAME]: \"azure_openai_45_turbo_id\",\n-    [VALID_ENV_KEYS.AZURE_EMBEDDINGS_NAME]: \"azure_openai_embeddings_id\"\n-  }\n-\n-  for (const [envKey, profileKey] of Object.entries(apiKeys)) {\n-    if (process.env[envKey]) {\n-      ;(profile as any)[profileKey] = process.env[envKey]\n-    }\n-  }\n-\n-  return profile\n-}\n-\n-export function checkApiKey(apiKey: string | null, keyName: string) {\n-  if (apiKey === null || apiKey === \"\") {\n"
                },
                {
                    "date": 1718042908653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,12 +65,9 @@\n \n   return profile\n }\n \n-export function createResponse(data: object, status: number): Response {\n-  return new Response(JSON.stringify(data), {\n-    status,\n-    headers: {\n-      \"Content-Type\": \"application/json\"\n-    }\n-  })\n+export function checkApiKey(apiKey: string | null, keyName: string) {\n+  if (apiKey === null || apiKey === \"\") {\n+    throw new Error(`${keyName} API Key not found`)\n+  }\n }\n"
                }
            ],
            "date": 1718042448691,
            "name": "Commit-0",
            "content": "import { Database, Tables } from \"@/supabase/types\"\nimport { VALID_ENV_KEYS } from \"@/types/valid-keys\"\nimport { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport async function getServerProfile() {\n  const cookieStore = cookies()\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        }\n      }\n    }\n  )\n\n  const user = (await supabase.auth.getUser()).data.user\n  if (!user) {\n    throw new Error(\"User not found\")\n  }\n\n  const { data: profile } = await supabase\n    .from(\"profiles\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n    .single()\n\n  if (!profile) {\n    throw new Error(\"Profile not found\")\n  }\n\n  const profileWithKeys = addApiKeysToProfile(profile)\n\n  return profileWithKeys\n}\n\nfunction addApiKeysToProfile(profile: Tables<\"profiles\">) {\n  const apiKeys = {\n    [VALID_ENV_KEYS.OPENAI_API_KEY]: \"openai_api_key\",\n    [VALID_ENV_KEYS.ANTHROPIC_API_KEY]: \"anthropic_api_key\",\n    [VALID_ENV_KEYS.GOOGLE_GEMINI_API_KEY]: \"google_gemini_api_key\",\n    [VALID_ENV_KEYS.MISTRAL_API_KEY]: \"mistral_api_key\",\n    [VALID_ENV_KEYS.GROQ_API_KEY]: \"groq_api_key\",\n    [VALID_ENV_KEYS.PERPLEXITY_API_KEY]: \"perplexity_api_key\",\n    [VALID_ENV_KEYS.AZURE_OPENAI_API_KEY]: \"azure_openai_api_key\",\n    [VALID_ENV_KEYS.OPENROUTER_API_KEY]: \"openrouter_api_key\",\n\n    [VALID_ENV_KEYS.OPENAI_ORGANIZATION_ID]: \"openai_organization_id\",\n\n    [VALID_ENV_KEYS.AZURE_OPENAI_ENDPOINT]: \"azure_openai_endpoint\",\n    [VALID_ENV_KEYS.AZURE_GPT_35_TURBO_NAME]: \"azure_openai_35_turbo_id\",\n    [VALID_ENV_KEYS.AZURE_GPT_45_VISION_NAME]: \"azure_openai_45_vision_id\",\n    [VALID_ENV_KEYS.AZURE_GPT_45_TURBO_NAME]: \"azure_openai_45_turbo_id\",\n    [VALID_ENV_KEYS.AZURE_EMBEDDINGS_NAME]: \"azure_openai_embeddings_id\"\n  }\n\n  for (const [envKey, profileKey] of Object.entries(apiKeys)) {\n    if (process.env[envKey]) {\n      ;(profile as any)[profileKey] = process.env[envKey]\n    }\n  }\n\n  return profile\n}\n\nexport function checkApiKey(apiKey: string | null, keyName: string) {\n  if (apiKey === null || apiKey === \"\") {\n    throw new Error(`${keyName} API Key not found`)\n  }\n}\nimport { Database, Tables } from \"@/supabase/types\"\nimport { VALID_ENV_KEYS } from \"@/types/valid-keys\"\nimport { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport async function getServerProfile() {\n  const cookieStore = cookies()\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        }\n      }\n    }\n  )\n\n  const user = (await supabase.auth.getUser()).data.user\n  if (!user) {\n    throw new Error(\"User not found\")\n  }\n\n  const { data: profile } = await supabase\n    .from(\"profiles\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n    .single()\n\n  if (!profile) {\n    throw new Error(\"Profile not found\")\n  }\n\n  const profileWithKeys = addApiKeysToProfile(profile)\n\n  return profileWithKeys\n}\n\nfunction addApiKeysToProfile(profile: Tables<\"profiles\">) {\n  const apiKeys = {\n    [VALID_ENV_KEYS.OPENAI_API_KEY]: \"openai_api_key\",\n    [VALID_ENV_KEYS.ANTHROPIC_API_KEY]: \"anthropic_api_key\",\n    [VALID_ENV_KEYS.GOOGLE_GEMINI_API_KEY]: \"google_gemini_api_key\",\n    [VALID_ENV_KEYS.MISTRAL_API_KEY]: \"mistral_api_key\",\n    [VALID_ENV_KEYS.GROQ_API_KEY]: \"groq_api_key\",\n    [VALID_ENV_KEYS.PERPLEXITY_API_KEY]: \"perplexity_api_key\",\n    [VALID_ENV_KEYS.AZURE_OPENAI_API_KEY]: \"azure_openai_api_key\",\n    [VALID_ENV_KEYS.OPENROUTER_API_KEY]: \"openrouter_api_key\",\n\n    [VALID_ENV_KEYS.OPENAI_ORGANIZATION_ID]: \"openai_organization_id\",\n\n    [VALID_ENV_KEYS.AZURE_OPENAI_ENDPOINT]: \"azure_openai_endpoint\",\n    [VALID_ENV_KEYS.AZURE_GPT_35_TURBO_NAME]: \"azure_openai_35_turbo_id\",\n    [VALID_ENV_KEYS.AZURE_GPT_45_VISION_NAME]: \"azure_openai_45_vision_id\",\n    [VALID_ENV_KEYS.AZURE_GPT_45_TURBO_NAME]: \"azure_openai_45_turbo_id\",\n    [VALID_ENV_KEYS.AZURE_EMBEDDINGS_NAME]: \"azure_openai_embeddings_id\"\n  }\n\n  for (const [envKey, profileKey] of Object.entries(apiKeys)) {\n    if (process.env[envKey]) {\n      ;(profile as any)[profileKey] = process.env[envKey]\n    }\n  }\n\n  return profile\n}\n\nexport function checkApiKey(apiKey: string | null, keyName: string) {\n  if (apiKey === null || apiKey === \"\") {\n"
        }
    ]
}