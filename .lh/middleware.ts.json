{
    "sourceFile": "middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1718020561366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1718020561366,
            "name": "Commit-0",
            "content": "import { createClient } from \"@/lib/supabase/middleware\"\nimport { i18nRouter } from \"next-i18n-router\"\nimport { NextResponse, type NextRequest } from \"next/server\"\nimport i18nConfig from \"./i18nConfig\"\n\nexport async function middleware(request: NextRequest) {\n  const i18nResult = i18nRouter(request, i18nConfig)\n  if (i18nResult) return i18nResult\n\n  try {\n    const { supabase, response } = createClient(request)\n\n    const session = await supabase.auth.getSession()\n\n    const redirectToChat = session && request.nextUrl.pathname === \"/\"\n\n    if (redirectToChat) {\n      const { data: homeWorkspace, error } = await supabase\n        .from(\"workspaces\")\n        .select(\"*\")\n        .eq(\"user_id\", session.data.session?.user.id)\n        .eq(\"is_home\", true)\n        .single()\n\n      if (!homeWorkspace) {\n        throw new Error(error?.message)\n      }\n\n      return NextResponse.redirect(\n        new URL(`/${homeWorkspace.id}/chat`, request.url)\n      )\n    }\n\n    return response\n  } catch (e) {\n    return NextResponse.next({\n      request: {\n        headers: request.headers\n      }\n    })\n  }\n}\n\nexport const config = {\n  matcher: \"/((?!api|static|.*\\\\..*|_next|auth).*)\"\n}\n"
        }
    ]
}