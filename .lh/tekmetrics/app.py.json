{
    "sourceFile": "tekmetrics/app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1718288063181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1718288063181,
            "name": "Commit-0",
            "content": "from flask import Flask, request, jsonify, render_template_string, redirect, url_for\nimport requests\nfrom datetime import datetime, timedelta\nimport logging\nimport base64\nimport os\nfrom dotenv import load_dotenv\nfrom difflib import SequenceMatcher\n\napp = Flask(__name__)\n\n# Load environment variables\nload_dotenv()\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Environment variables\nTEKMETRIC_API_URL = os.getenv('TEKMETRIC_API_URL', 'https://sandbox.tekmetric.com/api/v1')\nSHOP_ID = os.getenv('SHOP_ID')\nCLIENT_ID = os.getenv('TEKMETRICS_CLIENT_ID')\nCLIENT_SECRET = os.getenv('TEKMETRICS_CLIENT_SECRET')\nTOKEN_URL = f'{TEKMETRIC_API_URL}/oauth/token'\n\n# CSS for styling\ncss_styles = '''\n<style>\n    body {\n        font-family: Arial, sans-serif;\n        background-color: #f8f9fa;\n        color: #343a40;\n        margin: 0;\n        padding: 0;\n    }\n    header {\n        background-color: #007bff;\n        color: white;\n        padding: 1em;\n        text-align: center;\n    }\n    h1, h2, p {\n        margin: 0.5em 0;\n    }\n    form, .content {\n        max-width: 800px;\n        margin: 2em auto;\n        padding: 1em;\n        background: white;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n    label {\n        display: block;\n        margin-bottom: 0.5em;\n        font-weight: bold;\n    }\n    input[type=\"text\"], input[type=\"date\"] {\n        width: 100%;\n        padding: 0.5em;\n        margin-bottom: 1em;\n        border: 1px solid #ced4da;\n        border-radius: 0.25em;\n    }\n    input[type=\"submit\"], .button {\n        display: inline-block;\n        padding: 0.5em 1em;\n        color: white;\n        background-color: #007bff;\n        border: none;\n        border-radius: 0.25em;\n        text-decoration: none;\n        cursor: pointer;\n    }\n    input[type=\"submit\"]:hover, .button:hover {\n        background-color: #0056b3;\n    }\n    ul {\n        list-style-type: none;\n        padding: 0;\n    }\n    li {\n        background: #f1f3f5;\n        margin-bottom: 0.5em;\n        padding: 0.5em;\n        border-radius: 0.25em;\n    }\n</style>\n'''\n\n# HTML template for the form\nform_template = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Tekmetric Search</title>\n    ''' + css_styles + '''\n</head>\n<body>\n    <header>\n        <h1>Tekmetric Search</h1>\n    </header>\n    <div class=\"content\">\n        <form action=\"/search_customer\" method=\"post\">\n            <label for=\"customerName\">Customer Name:</label>\n            <input type=\"text\" id=\"customerName\" name=\"customerName\" placeholder=\"Enter customer name\" required>\n            <input type=\"submit\" value=\"Search\">\n        </form>\n        <form action=\"/search_vehicle\" method=\"post\">\n            <label for=\"vehicleMake\">Vehicle Make:</label>\n            <input type=\"text\" id=\"vehicleMake\" name=\"vehicleMake\" placeholder=\"Enter vehicle make\">\n            <label for=\"vehicleModel\">Vehicle Model:</label>\n            <input type=\"text\" id=\"vehicleModel\" name=\"vehicleModel\" placeholder=\"Enter vehicle model\">\n            <label for=\"vehicleYear\">Vehicle Year:</label>\n            <input type=\"text\" id=\"vehicleYear\" name=\"vehicleYear\" placeholder=\"Enter vehicle year\">\n            <label for=\"vehicleColor\">Vehicle Color:</label>\n            <input type=\"text\" id=\"vehicleColor\" name=\"vehicleColor\" placeholder=\"Enter vehicle color\">\n            <input type=\"submit\" value=\"Search\">\n        </form>\n        <form action=\"/search_appointments\" method=\"post\">\n            <label for=\"startDate\">Start Date:</label>\n            <input type=\"date\" id=\"startDate\" name=\"startDate\" value=\"{{ default_start_date }}\">\n            <label for=\"endDate\">End Date:</label>\n            <input type=\"date\" id=\"endDate\" name=\"endDate\" value=\"{{ default_end_date }}\">\n            <input type=\"submit\" value=\"Search Appointments\">\n        </form>\n        {% if customers %}\n            <h2>Customer Matches:</h2>\n            <ul>\n                {% for customer in customers %}\n                    <li>\n                        <a href=\"/profile/{{ customer['id'] }}\">{{ customer['firstName'] }} {{ customer['lastName'] }}</a> - \n                        ID: {{ customer['id'] }} - \n                        Email: {{ customer['email'] }} - \n                        Birthday: {{ customer['birthday'] }} - \n                        Vehicles: \n                        {% for vehicle in customer['vehicles'] %}\n                            <a href=\"/vehicle_profile/{{ vehicle['id'] }}\">{{ vehicle['year'] }} {{ vehicle['make'] }} {{ vehicle['model'] }} {{ vehicle['subModel'] }}</a> (VIN: <a href=\"/vehicle_profile/{{ vehicle['id'] }}\">{{ vehicle['vin'] }}</a>){% if not loop.last %}, {% endif %}\n                        {% endfor %}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n        {% if vehicles %}\n            <h2>Vehicle Matches:</h2>\n            <ul>\n                {% for vehicle in vehicles %}\n                    <li>\n                        <a href=\"/vehicle_profile/{{ vehicle['id'] }}\">{{ vehicle['year'] }} {{ vehicle['make'] }} {{ vehicle['model'] }} {{ vehicle['subModel'] }}</a> - \n                        Color: {{ vehicle['color'] }} - \n                        VIN: <a href=\"/vehicle_profile/{{ vehicle['id'] }}\">{{ vehicle['vin'] }}</a> - \n                        License Plate: {{ vehicle['licensePlate'] }} - \n                        State: {{ vehicle['state'] }} - \n                        Customer ID: {{ vehicle['customerId'] }}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n        {% if appointments %}\n            <h2>Appointments:</h2>\n            <ul>\n                {% for appointment in appointments %}\n                    <li>\n                        <a href=\"/appointment/{{ appointment['id'] }}\">{{ appointment['id'] }}</a>: {{ appointment['startTime'] }} - {{ appointment['endTime'] }}: {{ appointment['description'] }} - Customer: {{ appointment['customerName'] }} - Vehicle: {{ appointment['vehicleInfo'] }}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>\n'''\n\n# HTML template for the customer profile\nprofile_template = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Customer Profile: {{ customer['firstName'] }} {{ customer['lastName'] }}</title>\n    ''' + css_styles + '''\n</head>\n<body>\n    <header>\n        <h1>Customer Profile</h1>\n        <a href=\"/\" class=\"button\">Home</a>\n    </header>\n    <div class=\"content\">\n        <h2>{{ customer['firstName'] }} {{ customer['lastName'] }}</h2>\n        <p><strong>ID:</strong> {{ customer['id'] }}</p>\n        <p><strong>Email:</strong> {{ customer['email'] }}</p>\n        <p><strong>Birthday:</strong> {{ customer['birthday'] }}</p>\n        <p><strong>Type:</strong> {{ customer['customerType']['name'] }}</p>\n        <p><strong>Notes:</strong> {{ customer['notes'] }}</p>\n        <p><strong>Address:</strong> {{ customer['address']['fullAddress'] }}</p>\n        \n        <h2>Vehicles</h2>\n        <ul>\n            {% for vehicle in vehicles %}\n                <li>\n                    {{ vehicle['year'] }} {{ vehicle['make'] }} {{ vehicle['model'] }} - {{ vehicle['subModel'] }}<br>\n                    VIN: <a href=\"/vehicle_profile/{{ vehicle['id'] }}\">{{ vehicle['vin'] }}</a><br>\n                    License Plate: {{ vehicle['licensePlate'] }}<br>\n                    State: {{ vehicle['state'] }}<br>\n                    Drive Type: {{ vehicle['driveType'] }}<br>\n                    Transmission: {{ vehicle['transmission'] }}<br>\n                    Body Type: {{ vehicle['bodyType'] }}<br>\n                    Engine: {{ vehicle['engine'] }}<br>\n                    Color: {{ vehicle['color'] }}<br>\n                    Notes: {{ vehicle['notes'] }}\n                </li>\n            {% endfor %}\n        </ul>\n\n        <h2>Service Dates</h2>\n        <ul>\n            {% for appointment in appointments %}\n                <li>{{ appointment['startTime'] }} - {{ appointment['description'] }}</li>\n            {% endfor %}\n        </ul>\n\n        <h2>Repair Orders</h2>\n        <ul>\n            {% for order in repair_orders %}\n                <li>\n                    <strong>Order #{{ order['repairOrderNumber'] }}:</strong> {{ order['repairOrderStatus']['name'] }}<br>\n                    Amount Paid: {{ order['amountPaid'] }}<br>\n                    Labor Sales: {{ order['laborSales'] }}<br>\n                    Parts Sales: {{ order['partsSales'] }}<br>\n                    Sublet Sales: {{ order['subletSales'] }}<br>\n                    Fees: {{ order['feeTotal'] }}<br>\n                    Discounts: {{ order['discountTotal'] }}<br>\n                    Total Sales: {{ order['totalSales'] }}<br>\n                    Jobs:\n                    <ul>\n                        {% for job in order['jobs'] %}\n                            <li>{{ job['name'] }} - {{ job['note'] }}</li>\n                        {% endfor %}\n                    </ul>\n                    Customer Concerns:\n                    <ul>\n                        {% for concern in order['customerConcerns'] %}\n                            <li>{{ concern['concern'] }}</li>\n                        {% endfor %}\n                    </ul>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <form action=\"/search_customer\" method=\"post\">\n            <label for=\"customerName\">Search Another Customer:</label>\n            <input type=\"text\" id=\"customerName\" name=\"customerName\" placeholder=\"Enter customer name\" required>\n            <input type=\"submit\" value=\"Search\">\n        </form>\n    </div>\n</body>\n</html>\n'''\n\n# HTML template for the appointment profile\nappointment_profile_template = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Appointment Profile: {{ appointment['id'] }}</title>\n    ''' + css_styles + '''\n</head>\n<body>\n    <header>\n        <h1>Appointment Profile</h1>\n        <a href=\"/\" class=\"button\">Home</a>\n    </header>\n    <div class=\"content\">\n        <h2>Appointment ID: {{ appointment['id'] }}</h2>\n        <p><strong>Shop ID:</strong> {{ appointment['shopId'] }}</p>\n        <p><strong>Customer:</strong> <a href=\"/profile/{{ appointment['customerId'] }}\">{{ appointment['customerName'] }}</a></p>\n        <p><strong>Vehicle:</strong> <a href=\"/vehicle_profile/{{ appointment['vehicleId'] }}\">{{ appointment['vehicleInfo'] }}</a> (VIN: <a href=\"/vehicle_profile/{{ appointment['vehicleId'] }}\">{{ appointment['vehicleVin'] }}</a>)</p>\n        <p><strong>Start Time:</strong> {{ appointment['startTime'] }}</p>\n        <p><strong>End Time:</strong> {{ appointment['endTime'] }}</p>\n        <p><strong>Description:</strong> {{ appointment['description'] }}</p>\n        <p><strong>Created Date:</strong> {{ appointment['createdDate'] }}</p>\n        <p><strong>Updated Date:</strong> {{ appointment['updatedDate'] }}</p>\n    </div>\n</body>\n</html>\n'''\n\n# HTML template for the vehicle profile\nvehicle_profile_template = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vehicle Profile: {{ vehicle['year'] }} {{ vehicle['make'] }} {{ vehicle['model'] }}</title>\n    ''' + css_styles + '''\n</head>\n<body>\n    <header>\n        <h1>Vehicle Profile</h1>\n        <a href=\"/\" class=\"button\">Home</a>\n    </header>\n    <div class=\"content\">\n        <h2>{{ vehicle['year'] }} {{ vehicle['make'] }} {{ vehicle['model'] }}</h2>\n        <p><strong>VIN:</strong> {{ vehicle['vin'] }}</p>\n        <p><strong>Color:</strong> {{ vehicle['color'] }}</p>\n        <p><strong>Drive Type:</strong> {{ vehicle['driveType'] }}</p>\n        <p><strong>Body Type:</strong> {{ vehicle['bodyType'] }}</p>\n        <p><strong>Engine:</strong> {{ vehicle['engine'] }}</p>\n        <p><strong>Transmission:</strong> {{ vehicle['transmission'] }}</p>\n        <p><strong>Notes:</strong> {{ vehicle['notes'] }}</p>\n\n        <h2>Owner Information</h2>\n        <p><strong>Owner:</strong> <a href=\"/profile/{{ customer['id'] }}\">{{ customer['firstName'] }} {{ customer['lastName'] }}</a></p>\n        <p><strong>Address:</strong> {{ customer['address']['fullAddress'] }}</p>\n        \n        <h2>Repair Orders</h2>\n        <ul>\n            {% for order in repair_orders %}\n                <li>\n                    <strong>Order #{{ order['repairOrderNumber'] }}:</strong> {{ order['repairOrderStatus']['name'] }}<br>\n                    Amount Paid: {{ order['amountPaid'] }}<br>\n                    Labor Sales: {{ order['laborSales'] }}<br>\n                    Parts Sales: {{ order['partsSales'] }}<br>\n                    Sublet Sales: {{ order['subletSales'] }}<br>\n                    Fees: {{ order['feeTotal'] }}<br>\n                    Discounts: {{ order['discountTotal'] }}<br>\n                    Total Sales: {{ order['totalSales'] }}<br>\n                    Jobs:\n                    <ul>\n                        {% for job in order['jobs'] %}\n                            <li>{{ job['name'] }} - {{ job['note'] }}</li>\n                        {% endfor %}\n                    </ul>\n                    Customer Concerns:\n                    <ul>\n                        {% for concern in order['customerConcerns'] %}\n                            <li>{{ concern['concern'] }}</li>\n                        {% endfor %}\n                    </ul>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>\n'''\n\ndef get_access_token():\n    auth_header = f'{CLIENT_ID}:{CLIENT_SECRET}'.encode('ascii')\n    base64_bytes = base64.b64encode(auth_header)\n    base64_auth = base64_bytes.decode('ascii')\n\n    headers = {\n        'Authorization': f'Basic {base64_auth}',\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n    data = {\n        'grant_type': 'client_credentials'\n    }\n\n    logging.debug(f'Authorization Header: Basic {base64_auth}')\n    response = requests.post(TOKEN_URL, headers=headers, data=data)\n    logging.debug(f'Token response: {response.text}')\n\n    if response.status_code == 200:\n        return response.json().get('access_token')\n    else:\n        logging.error('Failed to obtain access token')\n        return None\n\ndef get_customer_details(access_token, customer_id):\n    customer_details_url = f'{TEKMETRIC_API_URL}/customers/{customer_id}?shop={SHOP_ID}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    customer_response = requests.get(customer_details_url, headers=headers)\n    logging.debug(f'Customer details response: {customer_response.text}')\n    \n    if customer_response.status_code == 200:\n        return customer_response.json()\n    else:\n        return None\n\ndef get_vehicle_details(access_token, vehicle_id):\n    vehicle_details_url = f'{TEKMETRIC_API_URL}/vehicles/{vehicle_id}?shop={SHOP_ID}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    vehicle_response = requests.get(vehicle_details_url, headers=headers)\n    logging.debug(f'Vehicle details response: {vehicle_response.text}')\n    \n    if vehicle_response.status_code == 200:\n        return vehicle_response.json()\n    else:\n        return None\n\n@app.route('/')\ndef index():\n    default_date = datetime.today().strftime('%Y-%m-%d')\n    return render_template_string(form_template, default_start_date=default_date, default_end_date=default_date)\n\n@app.route('/search_customer', methods=['POST'])\ndef search_customer():\n    customer_name = request.form.get('customerName')\n\n    # Get access token\n    access_token = get_access_token()\n    if not access_token:\n        return jsonify({\"error\": \"Failed to obtain access token\"}), 500\n    \n    # Split the customer name into potential first and last names\n    name_parts = customer_name.split()\n    \n    def search_customer(query):\n        customer_search_url = f'{TEKMETRIC_API_URL}/customers?shop={SHOP_ID}&search={query}&page=0&size=100'\n        headers = {\n            'Authorization': f'Bearer {access_token}'\n        }\n        response = requests.get(customer_search_url, headers=headers)\n        logging.debug(f'Customer search response for {query}: {response.text}')\n        if response.status_code == 200:\n            return response.json().get('content', [])\n        else:\n            return []\n\n    def match_score(customer_name, query):\n        return SequenceMatcher(None, customer_name.lower(), query.lower()).ratio()\n\n    customers = []\n    if len(name_parts) == 2:\n        first_name, last_name = name_parts\n        customers = search_customer(first_name) + search_customer(last_name)\n    else:\n        customers = search_customer(customer_name)\n\n    # Deduplicate customers based on ID\n    seen_ids = set()\n    unique_customers = []\n    for customer in customers:\n        if customer['id'] not in seen_ids:\n            seen_ids.add(customer['id'])\n            unique_customers.append(customer)\n\n    # Sort customers based on match score\n    unique_customers.sort(key=lambda x: max(match_score(x['firstName'], customer_name), match_score(x['lastName'], customer_name)), reverse=True)\n    \n    # Extract customer details and their vehicles\n    for customer in unique_customers:\n        customer['vehicles'] = get_customer_vehicles(access_token, customer['id'])\n\n    return render_template_string(form_template, customers=unique_customers)\n\n@app.route('/search_vehicle', methods=['POST'])\ndef search_vehicle():\n    vehicle_make = request.form.get('vehicleMake', '')\n    vehicle_model = request.form.get('vehicleModel', '')\n    vehicle_year = request.form.get('vehicleYear', '')\n    vehicle_color = request.form.get('vehicleColor', '')\n\n    # Get access token\n    access_token = get_access_token()\n    if not access_token:\n        return jsonify({\"error\": \"Failed to obtain access token\"}), 500\n    \n    # Construct search query\n    search_query = f'{vehicle_year} {vehicle_make} {vehicle_model} {vehicle_color}'.strip()\n    \n    vehicle_search_url = f'{TEKMETRIC_API_URL}/vehicles?shop={SHOP_ID}&search={search_query}&page=0&size=25'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    response = requests.get(vehicle_search_url, headers=headers)\n    logging.debug(f'Vehicle search response for {search_query}: {response.text}')\n    if response.status_code == 200:\n        vehicles = response.json().get('content', [])\n    else:\n        vehicles = []\n\n    return render_template_string(form_template, vehicles=vehicles)\n\n@app.route('/search_appointments', methods=['POST'])\ndef search_appointments():\n    start_date = request.form.get('startDate', '')\n    end_date = request.form.get('endDate', '')\n\n    # Use current date as default if no dates are provided\n    if not start_date and not end_date:\n        start_date = datetime.today().strftime('%Y-%m-%d')\n        end_date = start_date\n    elif start_date and not end_date:\n        end_date = start_date\n    elif not start_date and end_date:\n        start_date = end_date\n\n    # Convert date to ISO format with timezone for API compatibility\n    start_date_iso = f\"{start_date}T00:00:00Z\"\n    end_date_iso = f\"{end_date}T23:59:59Z\"\n\n    # Get access token\n    access_token = get_access_token()\n    if not access_token:\n        return jsonify({\"error\": \"Failed to obtain access token\"}), 500\n\n    appointments_url = f'{TEKMETRIC_API_URL}/appointments?shop={SHOP_ID}&start={start_date_iso}&end={end_date_iso}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    response = requests.get(appointments_url, headers=headers)\n    logging.debug(f'Appointments search response for {start_date} to {end_date}: {response.text}')\n    if response.status_code == 200:\n        appointments = response.json().get('content', [])\n    else:\n        appointments = []\n\n    # Add customer names and vehicle info to appointments\n    for appointment in appointments:\n        customer = get_customer_details(access_token, appointment['customerId'])\n        vehicle = get_vehicle_details(access_token, appointment['vehicleId'])\n        appointment['customerName'] = f\"{customer['firstName']} {customer['lastName']}\" if customer else \"Unknown Customer\"\n        appointment['vehicleInfo'] = f\"{vehicle['year']} {vehicle['make']} {vehicle['model']}\" if vehicle else \"Unknown Vehicle\"\n        appointment['vehicleVin'] = vehicle['vin'] if vehicle else \"Unknown VIN\"\n\n    return render_template_string(form_template, appointments=appointments)\n\n@app.route('/appointment/<int:appointment_id>')\ndef appointment(appointment_id):\n    access_token = get_access_token()\n    if not access_token:\n        return jsonify({\"error\": \"Failed to obtain access token\"}), 500\n\n    appointment_details_url = f'{TEKMETRIC_API_URL}/appointments/{appointment_id}?shop={SHOP_ID}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    appointment_response = requests.get(appointment_details_url, headers=headers)\n    logging.debug(f'Appointment details response: {appointment_response.text}')\n\n    if appointment_response.status_code != 200:\n        return jsonify({\"error\": \"Failed to retrieve appointment details\"}), appointment_response.status_code\n\n    appointment = appointment_response.json()\n\n    customer = get_customer_details(access_token, appointment['customerId'])\n    vehicle = get_vehicle_details(access_token, appointment['vehicleId'])\n    appointment['customerName'] = f\"{customer['firstName']} {customer['lastName']}\" if customer else \"Unknown Customer\"\n    appointment['vehicleInfo'] = f\"{vehicle['year']} {vehicle['make']} {vehicle['model']}\" if vehicle else \"Unknown Vehicle\"\n    appointment['vehicleVin'] = vehicle['vin'] if vehicle else \"Unknown VIN\"\n\n    return render_template_string(appointment_profile_template, appointment=appointment)\n\ndef get_customer_vehicles(access_token, customer_id):\n    customer_vehicles_url = f'{TEKMETRIC_API_URL}/vehicles?shop={SHOP_ID}&customerId={customer_id}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    response = requests.get(customer_vehicles_url, headers=headers)\n    logging.debug(f'Customer vehicles response: {response.text}')\n    if response.status_code == 200:\n        return response.json().get('content', [])\n    else:\n        return []\n\n@app.route('/profile/<int:customer_id>')\ndef profile(customer_id):\n    access_token = get_access_token()\n    if not access_token:\n        return jsonify({\"error\": \"Failed to obtain access token\"}), 500\n\n    customer_details_url = f'{TEKMETRIC_API_URL}/customers/{customer_id}?shop={SHOP_ID}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    customer_response = requests.get(customer_details_url, headers=headers)\n    logging.debug(f'Customer details response: {customer_response.text}')\n\n    if customer_response.status_code != 200:\n        return jsonify({\"error\": \"Failed to retrieve customer details\"}), customer_response.status_code\n\n    customer = customer_response.json()\n\n    vehicles = get_customer_vehicles(access_token, customer_id)\n\n    service_dates_url = f'{TEKMETRIC_API_URL}/appointments?shop={SHOP_ID}&customerId={customer_id}'\n    appointments_response = requests.get(service_dates_url, headers=headers)\n    logging.debug(f'Service dates response: {appointments_response.text}')\n    appointments = appointments_response.json().get('content', []) if appointments_response.status_code == 200 else []\n\n    repair_orders_url = f'{TEKMETRIC_API_URL}/repair-orders?shop={SHOP_ID}&customerId={customer_id}'\n    repair_orders_response = requests.get(repair_orders_url, headers=headers)\n    logging.debug(f'Repair orders response: {repair_orders_response.text}')\n    repair_orders = repair_orders_response.json().get('content', []) if repair_orders_response.status_code == 200 else []\n\n    return render_template_string(profile_template, customer=customer, vehicles=vehicles, appointments=appointments, repair_orders=repair_orders)\n\n@app.route('/vehicle_profile/<int:vehicle_id>')\ndef vehicle_profile(vehicle_id):\n    access_token = get_access_token()\n    if not access_token:\n        return jsonify({\"error\": \"Failed to obtain access token\"}), 500\n\n    vehicle_details_url = f'{TEKMETRIC_API_URL}/vehicles/{vehicle_id}?shop={SHOP_ID}'\n    headers = {\n        'Authorization': f'Bearer {access_token}'\n    }\n    vehicle_response = requests.get(vehicle_details_url, headers=headers)\n    logging.debug(f'Vehicle details response: {vehicle_response.text}')\n\n    if vehicle_response.status_code != 200:\n        return jsonify({\"error\": \"Failed to retrieve vehicle details\"}), vehicle_response.status_code\n\n    vehicle = vehicle_response.json()\n\n    customer_details_url = f'{TEKMETRIC_API_URL}/customers/{vehicle[\"customerId\"]}?shop={SHOP_ID}'\n    customer_response = requests.get(customer_details_url, headers=headers)\n    logging.debug(f'Customer details response: {customer_response.text}')\n    if customer_response.status_code != 200:\n        return jsonify({\"error\": \"Failed to retrieve customer details\"}), customer_response.status_code\n\n    customer = customer_response.json() if customer_response.status_code == 200 else None\n\n    repair_orders_url = f'{TEKMETRIC_API_URL}/repair-orders?shop={SHOP_ID}&vehicleId={vehicle_id}'\n    repair_orders_response = requests.get(repair_orders_url, headers=headers)\n    logging.debug(f'Repair orders response: {repair_orders_response.text}')\n    repair_orders = repair_orders_response.json().get('content', []) if repair_orders_response.status_code == 200 else []\n\n    return render_template_string(vehicle_profile_template, vehicle=vehicle, customer=customer, repair_orders=repair_orders)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"
        }
    ]
}